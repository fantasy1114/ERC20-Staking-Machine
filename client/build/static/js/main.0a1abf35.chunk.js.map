{"version":3,"sources":["../node_modules/truffle-interface-adapter/node_modules/web3-eth-accounts/src sync","utils/getWeb3.js","TokenSetup.jsx","DepositPot.jsx","ApproveInfo.jsx","TokenAmountTextBox.jsx","ApproveTransfer.jsx","TokenContext.js","CrowdsaleTesting.jsx","PriceChart.jsx","CrowdsaleOwnerPanel.jsx","OwnerPanel.jsx","WithdrawBox.jsx","PenaltyWithdrawDialog.jsx","RewardBox.jsx","StakingDetail.jsx","StakingEntry.jsx","AccountInfo.jsx","StakingLister.jsx","StakingForm.jsx","StakingPanel.jsx","ReferralEntry.jsx","ReferralBox.jsx","CrowdsalePanel.jsx","HomePage.jsx","TestingBox.jsx","AccountStatus.jsx","MainBar.jsx","MachineState.jsx","UserBox.jsx","Web3ErrorPage.jsx","App.js","serviceWorker.js","i18n.js","index.js","../node_modules/truffle-contract/node_modules/web3-eth-accounts/src sync"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","getWeb3","Promise","reject","window","addEventListener","a","async","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","TokenSetup","props","state","callbackTokenSetted","callbackSetted","stakingInstance","tokenAddress","account","showSuccessLabel","handleChange","bind","handleSubmit","this","methods","setTokenAddress","send","from","then","result","setState","catch","err","event","target","value","preventDefault","writeTokenAddress","Grid","container","direction","justify","alignItems","item","Typography","variant","component","color","TextField","required","label","placeholder","margin","onChange","Button","onClick","Component","DepositPot","contractInterface","tokenDecimals","tokenSymbol","tokenName","tokenInstance","stakingAddress","depositAmount","realDepositAmount","currentPot","potentialWithdraw","machineState","showError","errorMessage","loading","approvementConfirmed","events","PotUpdated","on","updatePotValue","getCurrentPot","getPotentialWithdrawAmount","getMachineState","depositPot","toString","enqueueSnackbar","anchorOrigin","vertical","horizontal","integerAmount","Number","decimals","BigNumber","pow","multiply","finalAmount","utils","toBN","getApprove","res","depositIntoPot","call","toViewAmount","newPot","returnValues","_amount","BN","div","toNumber","approve","response","approvedAmount","Grow","in","Paper","elevation","style","padding","backgroundColor","spacing","CircularProgress","withSnackbar","ApproveInfo","open","handleClickOpen","handleClose","classes","startIcon","className","helpButton","i18nKey","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","dividers","gutterBottom","Link","href","DialogActions","autoFocus","React","withStyles","theme","background","border","borderColor","TokenAmountTextBox","amount","viewAmount","_inputAmount","divide","error","input","realAmount","calcRealAmount","ApproveTranfer","accounts","viewApprovedAmount","hasAllowance","setApprovement","editAmountModeMode","handleEditButton","Transfer","allowance","amountAllowed","isZero","isNeg","alert","_amountToApprove","_realAmount","newState","editAmountMode","allowanceMessage","approveButtonText","TokenContext","createContext","CrowdsaleTesting","currentRate","amountOfBITN","amountOfWEI","amountOfETH","handleBITNChange","handleRateChange","ethResult","WEIAmount","ETHAmount","fromWei","PriceChart","crowdsaleInstance","priceData","getHistoricalPriceData","getPastEvents","fromBlock","toBlock","data","forEach","_blockNumber","blockNumber","_rate","args","newRate","push","name","rate","width","height","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","CrowdsaleOwnerPanel","crowdsaleAddress","handleSetRate","loadCrowdsaleContract","getAvailableBalance","contract","require","crowdsaleContract","BITNCrowdsale","setProvider","currentProvider","at","instance","address","getCurrentRate","getAvailableToken","eth","getAccounts","setRate","toWei","String","OwnerBox","tokenLoaded","Consumer","context","ApproveTransfer","symbol","WithdrawBox","contractInstance","stakeID","amountStaked","referralAddress","withdrawPenalty","selectedAccount","withdrawCallback","elasped","handlePenaltyWithdraw","handleDialogClose","setAccount","withdrawTokens","returnTokens","isWithdrawed","loadig","_stakeID","getStakeInfo","Boolean","_account","showPenaltyWarning","RewardBox","availableReward","withdrawRewards","PotExhausted","withdrawReward","rawResult","withdrawRewardButton","borderRadius","boxShadow","StakingDetail","periods","wasWithdraw","creationTime","referer","gain","penalty","currentAmount","stakeWithdrawAmount","isArchived","showReferer","infoLoaded","cookies","Cookies","archivedCallback","timer","handleShowReferer","handleArchivement","handleUnarchivement","handleWithdraw","StakeWithdraw","rewardWithdrawed","fetchStakeInfo","getPeriods","getAlreadyWithdrawed","power","_currentAmount","_penalty","calculateTime","forceUpdate","standardCreationTime","Date","now","standardTimeLocked","creationTimeString","calculatePeriods","_periods","reward","getAlreadyWithdrawedAmount","setInterval","set","path","get","currentValue","StakingEntry","timeLocked","compoundReward","moreDetail","detailBox","handleDetailView","getStakeAmount","getStakeTime","getCompoundReward","getCurrentStakeAmount","calculateCompoundInterest","ExpansionPanel","expansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","ExpansionPanelDetails","StakeInfo","referral","numberOfStake","stakeNumber","hasReferral","box","colorDefault","StakingLister","numberOfActiveStake","totalAmountStaked","stakingList","showArchived","referralLoaded","handleShowArchived","NewStake","newStakeListener","newWithdrawListener","listActiveStake","populateStakingList","getTotalStake","getActiveStakeNumber","getStakeCount","_numberOfStake","getActiveStakeCount","_numberOfActiveStake","getTotalStakeAmount","_totalStake","updateUI","list","i","archived","archived_string","getReferral","getMyReferral","myReferral","AccountInfo","Switch","checked","archivedSwitch","green","StakingForm","amountToStake","tokenBalance","showReferralInput","allowanceValue","handleAmountChange","handleReferralCheckbox","handleReferralAddress","checkAllowance","getTokenBalance","_amountToStake","balanceOf","viewBalance","activateStake","_referralAddress","stakeToken","referral_input","inputProps","min","max","step","Checkbox","checkBoxReferral","stakeButton","bar","StakingPanel","subscriptionEnded","newStakeHandler","checkSubscriptionEnd","isSubscriptionEnded","ReferralEntry","referredAddress","fetchReferralReward","calculateRewardReferral","Container","maxWidth","ListItemText","primary","ReferralBox","referrals","referral_list","viewReferralReward","withdrawReferralReward","fetchReferral","fetchTotalReward","referralRewardSent","getCurrentReferrals","length","calculateTotalRewardReferral","map","ref_address","ListItem","button","List","CrowdsalePanel","availableBalance","viewBITNAmount","handleBuy","buyTokens","rawBITNAmount","BITNAmount","buyButton","HomePage","Avatar","alt","src","to","TestingBox","timeToLock","batchTransaction","batch","BatchRequest","Contract","BitcoinCompanyNetworkTestToken","abi","options","stakingContract","StakingContract","add","execute","AccountStatus","MainBar","isEnglish","language","changeLanguageCallback","handleEnglish","handleItalian","AppBar","position","Toolbar","IconButton","edge","aria-label","openMenuCallback","logo","languageButton","marginLeft","marginRight","MachineState","statePercentpercentState","maxSupply","normalAmount","statePercent","contaier","title","UserBox","toggleDrawer","view","key","setView","menuOpened","getTokenAddress","_view","currentView","SwipeableDrawer","onOpen","ListItemIcon","Divider","appBackgroud","Web3ErrorPage","App","componentDidMount","_web3","_accounts","net","getId","networkId","networks","defaultAccount","StakingInstance","StakingAddress","handleContractRole","checkToken","isTokenSet","loadTokenInfo","isOwner","tokenContract","tokenContractInstance","isTokenLoaded","approved","menuCallback","callbackLanguage","i18n","changeLanguage","web3Unavailable","languageChanged","_language","body","Provider","OwnerPanel","Box","location","hostname","match","use","LanguageDetector","init","resources","en","translations","Title","staking_form","subtitle","referralCheckbox","textBoxHelper","referralPlaceholder","errorUndefinedStake","errorInsufficientFunds","errorNoAllowance","unableToStake","correctStake","sideMenu","stakingForm","stakeList","machineAvailableAmount","loadingMachineState","staking_list","noStakePresent","account_info","totalAmount","noReferralPresent","referral_panel","myReferralLabel","totalAvailavelReward","withdrawAll","noReferral","stake_detail","previewText","periodElasped","withdrawed","availableRewards","withdraw","withdrawBox","withdrawLabel","tokenSuccesWithdrawMsg","tokenFailedWithdrawMsg","help","p1","p2","p3","linkText","link","crowdsale","liquidity","amountBITN","amountETH","snackbarSuccess","snackbarFailure","liquidityLimitReached","approvementPanel","approvementStatus","editExternalButton","textLabel","editInternalButton","closeButton","goStaking","needToken","goCrowdsale","it","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","formatSeparator","react","wait","ReactDOM","render","maxSnack","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0a1abf35.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 1016;","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport StakingContract from \"./contracts/Staking.json\";\nimport getWeb3 from \"./utils/getWeb3\";\n\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid'\n\n\nclass TokenSetup extends Component {\n\n\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n                    callbackTokenSetted: props.callbackSetted,\n                    stakingInstance: props.stakingInstance,\n                    tokenAddress: \"\",\n                    account: props.account,\n                    showSuccessLabel: false\n            };\n\n        \n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n    }\n\n\n    writeTokenAddress(){\n\n        this.state.stakingInstance.methods.setTokenAddress(this.state.tokenAddress).send({ from: this.state.account }).then((result) =>{\n            console.log(\"Account setted\")\n            this.setState({showSuccessLabel: true})\n            //this.state.callbackTokenSetted(this.state.tokenAddress);\n\n        }).catch( (err) => {\n            console.log(\"Invalid address\");\n            this.setState({tokenAddress: null})\n            return;\n        });\n\n    }\n\n\n\n    handleChange(event){\n        this.setState({tokenAddress: event.target.value})\n    }\n\n    handleSubmit(event) {\n        console.log(\"Token Address: \" + this.state.tokenAddress);\n        event.preventDefault();\n\n\n        this.writeTokenAddress();\n    }\n    \n\n    render(){\n\n        return (\n                <Grid\n                    container\n                    direction=\"column\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    >\n                        <Grid item>\n                            <Typography variant=\"body1\" component=\"h2\" color=\"textSecondary\">You must initialized the contract</Typography>\n                        </Grid>\n                        <Grid item>\n                            <TextField\n                            required\n                            label=\"Token Address\"\n                            placeholder=\"0x000000000000000000000000000\"\n                            margin=\"normal\"\n                            variant=\"outlined\"  \n                            onChange={this.handleChange}                          \n                            />\n                        </Grid>\n                        <Grid>\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.handleSubmit}>Set Address</Button>\n                        </Grid>\n                        {this.state.showSuccessLabel && (\n                            <Grid item>\n                                <Typography variant=\"body1\" component=\"h2\">Success operation, refresh the page</Typography>\n                            </Grid>\n                        )}\n\n                </Grid>\n        )\n\n    }\n\n}\n\n\nexport default TokenSetup;","import React, { Component } from \"react\";\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Grow from '@material-ui/core/Grow';\n\n\nimport { withSnackbar } from 'notistack';\n\n\nimport BigNumber from \"big-number\"\n\n\n//TODO: Handle multiple accounts\n\n\nclass DepositPot extends Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            contractInterface: this.props.contractInterface,\n            account: this.props.account,\n            tokenDecimals: props.tokenDecimals,\n            tokenSymbol: props.tokenSymbol,\n            tokenName: props.tokenName,\n            tokenInstance: props.tokenInstance,\n            stakingAddress: props.stakingAddress,\n            depositAmount: 0,\n            realDepositAmount: 0,\n            currentPot: 0,\n            potentialWithdraw: 0,\n            machineState: 0,\n            showError: false,\n            errorMessage: \"\",\n            loading: false,\n            approvementConfirmed: false\n        }\n\n        this.web3 = props.web3\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n    }\n\n\n    componentDidMount(){\n        //Pot Deposit Listener\n        this.state.contractInterface.events.PotUpdated().on('data', event => {\n            console.log(\"Pot Updated - Event Received\")\n            this.updatePotValue(event);\n        });\n\n        this.getCurrentPot();   //Update Pot value\n        this.getPotentialWithdrawAmount();\n        this.getMachineState();\n    }\n\n    componentWillUnmount(){\n        //TODO Unsubscribe the \"Pot Deposit Listener\"\n    }\n\n\n\n    depositIntoPot(){\n\n        this.state.contractInterface.methods.depositPot(this.state.realDepositAmount.toString()).send({ from: this.state.account }).then((result) =>{\n            console.log(\"Pot Deposited\")\n            this.props.enqueueSnackbar(\"Successful deposit\", {\n                variant: 'success',\n                anchorOrigin: {\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                },\n            });            \n            \n            this.setState({loading: false})\n\n\n            this.getCurrentPot();\n  \n\n        }).catch( (err) =>{\n            console.log(err)\n            this.setState({loading: false})\n            this.props.enqueueSnackbar(\"Unable to deposit pot, check your balace\", {\n                variant: 'error',\n                anchorOrigin: {\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                },\n            });\n        });\n    }\n\n\n\n    handleChange(event){\n\n        var integerAmount = Number(event.target.value)\n\n\n        var decimals = BigNumber(10).pow(this.state.tokenDecimals)\n\n        var result = BigNumber(integerAmount).multiply(decimals)\n\n        var finalAmount = this.web3.utils.toBN(result.toString())\n\n        this.setState({\n            depositAmount: event.target.value,\n            realDepositAmount: finalAmount\n        })\n    }\n\n    handleSubmit(event){\n        event.preventDefault();\n\n        this.getApprove().then( (res) => {\n            this.setState({approvementConfirmed: true})\n            this.depositIntoPot().then( (res) => {\n                this.setState({approvementConfirmed: false})\n            });\n        }).catch( (err) => {\n            console.log(\"Unable to get the allowance: \" + err)\n        }) \n    }\n\n    getCurrentPot(){\n        this.state.contractInterface.methods.getCurrentPot().call().then( (result) => {\n    \n                console.log(\"Current pot : \" + this.toViewAmount(result))\n                this.setState({currentPot: this.toViewAmount(result)});\n\n        }).catch( (err) => {\n            console.log(err);\n            this.props.enqueueSnackbar(\"Unable to fetch current pot\", {\n                variant: 'error',\n                anchorOrigin: {\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                },\n            });\n        }); \n\n    }\n\n\n    updatePotValue(event){\n        let newPot = event.returnValues.newPot;\n        this.setState({\n            currentPot: this.toViewAmount(newPot)\n        })\n    }\n\n\n    toViewAmount(_amount){\n        let BN = this.web3.utils.BN;\n        let decimals = new BN(10).pow( new BN(this.state.tokenDecimals));\n        let currentPot = new BN(_amount);\n        let viewAmount = currentPot.div(decimals) \n        return viewAmount.toNumber();       \n    }\n\n    async getApprove(){\n        \n        if(this.state.tokenInstance == null){\n            console.log(\"The contract is not instantiated yet\")\n            return;\n        }\n\n\n        console.log(\"Get Approve\")\n        console.log(this.state.realDepositAmount)\n\n        this.setState({loading: true})\n\n        await this.state.tokenInstance.approve(this.state.stakingAddress, this.state.realDepositAmount.toString(), {from: this.state.account}).then( (response) => {\n            console.log(response);\n            if(response === true){\n                console.log(\"Approved the management of \" + this.state.approvedAmount + \" tokens\")\n            }else{\n                console.log(\"Has NOT the approvement\")\n            }\n            return response;\n        }).catch( (err) =>{\n            console.log(err);\n            this.setState({loading: false})\n        });\n\n    }\n\n\n    async getPotentialWithdrawAmount(){\n\n        this.state.contractInterface.methods.getPotentialWithdrawAmount().call().then( (result) => {\n    \n            console.log(\"Current pot : \" + this.toViewAmount(result))\n            this.setState({potentialWithdraw: this.toViewAmount(result)});\n\n        }).catch( (err) => {\n            console.log(err);\n            this.props.enqueueSnackbar(\"Unable to fetch the potential withdraw amount\", {\n                variant: 'error',\n                anchorOrigin: {\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                },\n            });\n        }); \n        \n    }\n\n\n    async getMachineState(){\n        this.state.contractInterface.methods.getMachineState().call().then( (result) => {\n    \n            console.log(\"Machine state : \" + this.toViewAmount(result))\n            this.setState({machineState: this.toViewAmount(result)});\n\n        }).catch( (err) => {\n            console.log(err);\n            this.props.enqueueSnackbar(\"Unable to fetch the machine state\", {\n                variant: 'error',\n                anchorOrigin: {\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                },\n            });\n        });         \n    }\n\n\n    render(){\n\n        return (\n            <Grow in={true}>\n                <Paper \n                    elevation={4}\n                    style={{ padding: 20, margin: 0, backgroundColor: '#fafafa' }}\n                    >\n                        <Typography variant=\"h4\" component=\"h4\">Deposit Pot</Typography>\n\n                        <Grid\n                            container\n                            spacing={1}\n                            direction=\"column\"\n                            justify=\"center\"\n                            alignItems=\"center\"\n                            >\n                                {this.state.loading ? (\n                                    <div>\n                                        {this.state.approvementConfirmed && (\n                                           <Typography variant=\"body1\" component=\"h3\">Approvement confirmed, waiting for the deposit confirmation...</Typography> \n                                        )}\n                                        <CircularProgress></CircularProgress>\n                                    </div>\n                                ) : ( \n                                <div>\n                                <Grid item>\n                                    <Typography variant=\"body1\" component=\"h3\">Amount to deposit</Typography>\n                                </Grid>\n                                <Grid item>\n                                    <TextField\n                                        label=\"Amount to deposit\"\n                                        margin=\"normal\"\n                                        variant=\"outlined\" \n                                        value={this.state.depositAmount}\n                                        onChange={this.handleChange}                                \n                                        />\n                                </Grid>\n                                <Grid item>\n                                    <Button variant=\"contained\" color=\"secondary\" onClick={this.handleSubmit}>Deposit</Button>\n                                </Grid>\n                                </div>\n                                )}\n                                <Grid item>\n                                    <Typography variant=\"body1\" component=\"h6\">Current Pot: <b>{this.state.currentPot}</b> {this.state.tokenSymbol}</Typography>\n                                </Grid>\n                                <Grid item>\n                                    <Typography variant=\"body1\" component=\"h6\">Potential Withdraw: <b>{this.state.potentialWithdraw}</b> {this.state.tokenSymbol}</Typography>\n                                </Grid>\n                                <Grid item>\n                                    <Typography variant=\"body1\" component=\"h6\">Machine State: <b>{this.state.machineState}</b> {this.state.tokenSymbol}</Typography>\n                                </Grid>\n                        </Grid>\n                            \n                    </Paper>\n            </Grow>\n            \n        );\n\n    }\n}\n\nexport default withSnackbar(DepositPot);\n","import React, { Component } from \"react\";\n\n\n\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogActions from '@material-ui/core/DialogActions';\n\n\nimport HelpIcon from '@material-ui/icons/Help';\n\nimport { Trans } from \"react-i18next\";\n\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\n\nimport Link from '@material-ui/core/Link'\n\nconst styles = theme => ({\n    helpButton: {\n        background: '#50646e',\n        color: \"#efeded\",\n        border: \"1 px solid\",\n        borderColor: \"rgba(43, 43, 43, 0.5)\",\n        \"&:hover, &.Mui-focusVisible\": { \n            backgroundColor: \"#927b7ba6\",\n            color: \"#000000\",\n            border: \"1 px solid\",\n            borderColor: \"rgba(43, 43, 43, 0.5)\",\n        }\n    }\n  });\n\n\nclass ApproveInfo extends React.Component{\n\n    constructor (props){\n        super(props);\n\n        this.state = {\n            open: false\n        }\n\n        this.handleClickOpen = this.handleClickOpen.bind(this)\n        this.handleClose = this.handleClose.bind(this)\n    }\n\n\n    handleClickOpen() {\n        this.setState({\n            open: true\n        })\n    }\n\n\n    handleClose(){\n        this.setState({\n            open: false\n        })\n    }\n\n\n    render(){\n\n        const { classes } = this.props;\n\n\n        return(\n            <div>\n                <Button \n                    variant=\"outlined\" \n                    color=\"secondary\" \n                    onClick={this.handleClickOpen}\n                    startIcon={<HelpIcon />}\n                    className={classes.helpButton}\n                >\n                   <Trans i18nKey=\"staking_form.helpButton\" />\n                </Button>\n                <Dialog onClose={this.handleClose} aria-labelledby=\"customized-dialog-title\" open={this.state.open}>\n                    <DialogTitle id=\"customized-dialog-title\" onClose={this.handleClose}>\n                        ERC20 \"Allowance\"\n                    </DialogTitle>\n                    <DialogContent dividers>\n                        <Typography gutterBottom>\n                            <Trans i18nKey=\"help.p1\" />\n                        </Typography>\n                        <Typography gutterBottom>\n                            <Trans i18nKey=\"help.p2\" />\n                        </Typography>\n                        <Typography gutterBottom>\n                            <Trans i18nKey=\"help.p3\" />\n                        </Typography>\n                        <Typography gutterBottom>\n                            <Trans i18nKey=\"help.p4\" />\n                        </Typography>\n                        <Typography gutterBottom>\n                            <Link href=\"https://tokenallowance.io/it/index.html\"><Trans i18nKey=\"help.linkText\" /></Link>\n                        </Typography>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button autoFocus onClick={this.handleClose} color=\"primary\">\n                            Ok\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n\n            </div>\n        );\n\n    }\n\n\n\n\n\n\n}\n\n\nApproveInfo.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\n\nexport default withStyles(styles)(ApproveInfo);","import React, { Component } from \"react\";\nimport TextField from \"@material-ui/core/TextField\"\nimport BigNumber from \"big-number\"\n\nclass TokenAmountTextBox extends Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            decimals: props.decimals,\n            amount: props.amount,\n            viewAmount: 0\n        }\n\n        this.onChange = props.onChange;\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n\n    initializeViewAmount(){\n        if(this.state.amount !== 0){\n            \n        }\n    }\n\n\n    calcRealAmount(_inputAmount){\n        //try{\n            var decimals = BigNumber(10).pow(this.state.decimals);\n            var amount = BigNumber(_inputAmount);\n\n            var result = amount.multiply(decimals)\n            return result;\n        //}catch(error){\n        //    console.log(\"Unable to calculate the correct real amount;\" + error)\n        //}\n    }\n\n    calcViewAmount(_inputAmount){\n        try{\n            var decimals = BigNumber(10).pow(this.state.decimals);\n            var amount = BigNumber(_inputAmount);\n    \n            var result = amount.divide(decimals)\n            return result;\n        }catch(error){\n            console.log(\"Unable to calculate the correct view amount;\" + error)\n            return 0;\n        }\n    }\n\n\n    handleChange(event){\n        var input = event.target.value;\n        var realAmount = this.calcRealAmount(input);\n        console.log(\"REAL: \" + realAmount.toString())\n        this.setState({\n            amount: realAmount,\n            viewAmount: input\n        });\n\n        this.onChange(realAmount);\n    }   \n\n\n    render(){\n\n        return(\n            <TextField \n                value={this.state.viewAmount} \n                onChange={this.handleChange}\n                label={this.props.label}\n                margin=\"normal\"\n                placeholder={this.props.placeholder}\n                variant={this.props.variant}>\n            </TextField>\n        );\n\n    }\n}\n\n\nexport default TokenAmountTextBox;","import React, { Component } from \"react\";\n\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\n\n\nimport { Trans } from \"react-i18next\";\n\nimport { withSnackbar } from 'notistack';\n\nimport ApproveInfo from './ApproveInfo'\nimport TokenAmountTextBox from \"./TokenAmountTextBox\"\nimport BigNumber from \"big-number\"\n\n\nimport EditIcon from '@material-ui/icons/Edit';\n\n/**\n * @brief Component responsible for approving ERC20 transfer\n * \n * Load the Token contract and call the \"approve()\" method specifying the amount of token\n * this Dapp is allowed to manage.\n */\n\n\nconst style = {\n    height: 200,\n    width: 200,\n    margin: \"1em\",\n    textAlign: 'center',\n    display: 'inline-block',\n  };\n  \n\n\n\nclass ApproveTranfer extends React.Component{\n\n\n    /**\n     * Connect to the web3 interface and deploy the contract\n     * @param {function} callback is the callback function called after the cotract is\n     * instantiated\n     */\n    constructor(props){\n        super(props);\n        this.state = {\n            //TokenContext Data\n            tokenAddress: props.tokenAddress,\n            tokenDecimals: props.decimals,\n            tokenName: props.tokenName,\n            tokenInstance: props.tokenInstance,\n            tokenSymbol: props.tokenSymbol,\n            accounts: props.accounts,\n\n            stakingAddress: props.stakingAddress,\n            approvedAmount: 0,\n            viewApprovedAmount: 0,\n            hasAllowance: false,\n            setApprovement: props.setApprovement,\n            editAmountModeMode: false,\n            loading: false\n        }\n\n\n        this.web3 = props.web3;\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleEditButton = this.handleEditButton.bind(this)\n    }\n\n\n\n    componentDidMount(){\n        console.log(\"Checking allowance...\")\n\n        this.state.tokenInstance.Transfer().on('data', event => {\n            console.log(\"Transfer detected - Event Received\")\n            var sender = event.returnValues[0]\n            if(sender === this.state.accounts[0])\n                this.hasAllowance();\n        });\n        \n\n        this.hasAllowance();\n    }\n\n\n    async hasAllowance(){\n\n        if(this.state.tokenInstance === null)\n            return;\n\n\n\n        await this.state.tokenInstance.allowance(this.state.accounts[0], this.state.stakingAddress).then( (response) => {\n            console.log(response)\n            var amountAllowed = response;\n\n            if(!amountAllowed.isZero() && !amountAllowed.isNeg()){\n                    \n                    var BN = this.web3.utils.BN;\n                    var decimals = new BN(10).pow( new BN(this.state.tokenDecimals));\n        \n                    var result = amountAllowed.div(decimals)\n    \n                   \n                    console.log(\"Has the allowance to manage \" + result.toString() + \" tokens\")\n                    this.setState({\n                        hasAllowance: true,\n                        viewApprovedAmount: result.toString(10),\n                        approvedAmount: amountAllowed\n                    })\n                    this.props.enqueueSnackbar(\"Has the allowance to manage \" + result.toString(10) + \" tokens\", {\n                        variant: 'success',\n                        anchorOrigin: {\n                            vertical: 'bottom',\n                            horizontal: 'left',\n                        },\n                    });\n                    //this.state.setApprovement(true);\n                \n\n\n\n            }else{\n                console.log(\"Has NOT the allowance\")\n                this.setState({\n                    hasAllowance: true\n                })\n                //this.state.setApprovement(false);\n            }\n        }).catch( (err) =>{\n            alert(err);\n        });\n    }\n\n\n    async getApprove(){\n        \n        if(this.state.tokenInstance == null){\n            console.log(\"The contract is not instantiated yet\")\n            return;\n        }\n\n\n        console.log(\"Get Approve\")\n\n        this.setState({loading: true})\n\n\n\n        console.log(this.state.stakingAddress)\n        console.log(this.state.approvedAmount.toString())\n\n        await this.state.tokenInstance.approve(this.state.stakingAddress, this.state.approvedAmount.toString(), {from: this.state.accounts[0]}).then( (response) => {\n            console.log(response);\n            if(response === true){\n                console.log(\"Approved the management of \" + this.state.approvedAmount.toString() + \" tokens to \" + this.state.stakingAddress)\n                this.setState({\n                    hasAllowance: true\n                }, () => {\n                    this.props.enqueueSnackbar(\"Approved the management of \" + this.state.approvedAmount.toString() + \" tokens\", {\n                        variant: 'success',\n                        anchorOrigin: {\n                            vertical: 'bottom',\n                            horizontal: 'left',\n                        },\n                    });\n                })\n            }else{\n                console.log(\"Has NOT the approvement\")\n                this.setState({\n                    hasAllowance: false\n                });\n                \n            }\n            this.setState({loading: false})\n            return response;\n        }).catch( (err) =>{\n            console.log(err);\n            this.setState({loading: false})\n        });\n\n\n    }\n\n    handleChange(_amount){\n    \n        let _amountToApprove = _amount;\n        console.log(\"Amount: \" + _amountToApprove)\n        this.setState({\n            approvedAmount: _amountToApprove\n        });\n        \n    \n    }\n\n\n    toViewAmount(_realAmount){\n        if(_realAmount === 0)\n            return 0;\n\n        var decimals = BigNumber(10).pow(this.state.decimals);\n        var result = BigNumber(_realAmount).divide(decimals)\n        console.log(result)\n        return result;\n    }\n\n    \n\n    handleSubmit(event){\n        event.preventDefault();\n\n        this.getApprove().then( () => {\n            this.hasAllowance();\n        });\n    }\n\n    handleEditButton(event){\n        var newState = !this.state.editAmountMode;\n        this.setState({\n            editAmountMode: newState\n        })\n    }\n\n\n\n\n    render(){\n\n\n        var allowanceMessage, approveButtonText;\n\n        if(this.state.hasAllowance){\n            allowanceMessage = (\n                <div>\n                    <Typography variant=\"body1\" component=\"h3\">\n                    <Trans i18nKey=\"approvementPanel.approvementStatus\" /> <b>{this.state.viewApprovedAmount}</b> {this.state.tokenSymbol} tokens\n                    </Typography>\n                </div>\n            );\n            approveButtonText = (<Trans i18nKey=\"approvementPanel.editInternalButton\" />);\n        }else{\n            allowanceMessage = (\n                <Typography variant=\"body1\" component=\"h3\">Does not have the approvement</Typography>\n            );\n            approveButtonText = \"Amount to approve\";\n\n        }\n\n\n\n\n        if(this.state.tokenInstance == null){\n            return(\n                <div>\n                    <Typography variant=\"body1\" component=\"h3\">Unable to load token contract</Typography>\n                </div>\n            )\n        }\n\n\n        return(\n            <Paper \n                elevation={4}\n                style={{ padding: 20, margin: 10, backgroundColor: '#fafafa' }}\n            >  \n                <Grid\n                    container\n                    spacing={1}\n                    direction=\"column\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    >\n                        <Grid item>\n                            <Typography variant=\"h5\" component=\"h5\"><Trans i18nKey=\"approvementPanel.title\" /></Typography>\n                        </Grid>\n                        <Grid item>\n                            {allowanceMessage}\n                            {!this.state.editAmountMode && this.state.hasAllowance && (\n                                <Button color=\"secondary\" onClick={this.handleEditButton}><Trans i18nKey=\"approvementPanel.editExternalButton\" /></Button>\n                            )}\n                        </Grid>\n                        {(!this.state.hasAllowance || this.state.editAmountMode) && (\n                        <div>\n                        <Grid item>\n                            <ApproveInfo></ApproveInfo>\n                        </Grid>\n                        <Grid container\n                            spacing={1}\n                            direction=\"column\"\n                            justify=\"center\"\n                            alignItems=\"center\">\n                            <Grid>\n                                <TokenAmountTextBox\n                                    label={<Trans i18nKey=\"approvementPanel.textLabel\" />}\n                                    placeholder=\"500\"\n                                    variant=\"outlined\"\n                                    amount={0}\n                                    decimals={this.state.tokenDecimals}\n                                    onChange={this.handleChange}\n                                />\n                            </Grid>\n                            <Grid>\n                                <Button \n                                    variant=\"contained\" \n                                    color=\"primary\" \n                                    onClick={this.handleSubmit}\n                                    startIcon={<EditIcon />}\n                                    >\n                                        {approveButtonText}\n                                </Button>\n                            </Grid>\n                            {this.state.editAmountMode && (\n                                <Button color=\"secondary\" onClick={this.handleEditButton}><Trans i18nKey=\"approvementPanel.closeButton\" /></Button>\n                            )}\n                        </Grid>\n                        </div>\n                        )}\n                </Grid>\n            </Paper>\n        );\n\n    }\n\n}\n\n\nexport default withSnackbar(ApproveTranfer);","import React from 'react'\n\n\nconst TokenContext = React.createContext(null);\n\n\nexport default TokenContext;","import React, { Component } from \"react\";\n\n\n\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid'\nimport TextField from '@material-ui/core/TextField'\n\nimport { Trans } from \"react-i18next\";\n\n\nimport getWeb3 from \"./utils/getWeb3\";\n\nimport BigNumber from \"big-number\"\n\n\n\nclass CrowdsaleTesting extends React.Component{\n\n    constructor (props){\n        super(props);\n\n        this.state = {\n            web3: props.web3,\n            currentRate: 0,\n            amountOfBITN: 0,\n            amountOfWEI: 0,\n            amountOfETH: 0\n        }\n\n\n\n        this.handleBITNChange = this.handleBITNChange.bind(this)\n        this.handleRateChange = this.handleRateChange.bind(this)\n    }\n\n\n    handleBITNChange(event){\n\n        try{\n            let integerAmount = Number(event.target.value)\n            \n            let currentRate = BigNumber(this.state.currentRate)\n    \n            let decimals = BigNumber(10).pow(18)\n    \n            let rawBITNAmount = BigNumber(integerAmount).multiply(decimals)\n    \n            let ethResult = rawBITNAmount.divide(currentRate)\n            let WEIAmount = this.state.web3.utils.toBN(ethResult.toString())\n    \n            let ETHAmount = this.state.web3.utils.fromWei(WEIAmount);\n    \n    \n            this.setState({\n                amountOfBITN: integerAmount,\n                amountOfWEI: WEIAmount.toString(),\n                amountOfETH: ETHAmount.toString()\n            })\n        }catch( err ){\n            console.log(err)\n            this.setState({\n                amountOfBITN: 0,\n                amountOfWEI: 0,\n                amountOfETH: 0\n            })\n        }\n\n    }\n\n    handleRateChange(event){\n        console.log(\"Gwei rate: \" + Number(event.target.value))\n        this.setState({\n            currentRate: Number(event.target.value)\n        })\n    }\n\n\n\n\n\n    render(){\n\n        return(\n            <Grid\n                container\n                spacing={1}\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"center\"\n            >\n                <Grid item>\n                    <Typography variant=\"h5\">Rate testing area</Typography>\n                </Grid>\n                <Grid item>\n                    <TextField label=\"Custom rate in gwei\" value={this.state.currentRate} onChange={this.handleRateChange}></TextField>\n                </Grid>\n                <Grid item>\n                    <TextField label=\"Amount of BITN\" onChange={this.handleBITNChange} value={this.state.amountOfBITN}></TextField>\n                </Grid>\n                <Grid item>\n                    <TextField label=\"Amount of wei\" value={this.state.amountOfWEI}></TextField>\n                </Grid>\n                <Grid item>\n                    <TextField label=\"Amount of ETH\" value={this.state.amountOfETH}></TextField>\n                </Grid>\n            </Grid>\n        );\n\n    }\n\n\n\n}\n\n\nexport default CrowdsaleTesting;","import React, { Component } from \"react\";\n\n\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid'\nimport TextField from '@material-ui/core/TextField'\n\n\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer\n  } from 'recharts';\n\n\n\n  class PriceChart extends React.Component{\n\n    constructor (props){\n        super(props);\n\n        this.state = {\n            web3: props.web3,\n            crowdsaleInstance: props.crowdsaleInstance,\n            priceData: null\n        }\n\n    }\n\n\n    componentDidMount(){\n        this.getHistoricalPriceData();\n    }\n\n\n\n    getHistoricalPriceData(){\n\n        this.state.crowdsaleInstance.getPastEvents(\"RateUpdated\", {fromBlock: 0, toBlock: 'latest'}).then( (events) => {\n            console.log(\"Past events:\");\n            //console.log(events)\n\n\n            let data = []\n\n            events.forEach( (event) => {\n\n                //console.log(event)\n\n                let _blockNumber = event.blockNumber;\n\n                let _rate = event.args.newRate;\n                console.log(\"- \" + _blockNumber + \" - \" + _rate.toString())\n                //console.log(event)\n\n                data.push({name: _blockNumber, rate: _rate})\n\n            })\n\n            this.setState({\n                priceData: data\n            })\n        });\n\n    }\n\n\n\n    render(){\n\n        return(\n            <ResponsiveContainer style={{  width: 800, height: 800}}>\n            <LineChart width={600} height={300} data={this.state.priceData}\n            margin={{top: 20, right: 30, left: 20, bottom: 10}}>\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <XAxis dataKey=\"name\" height={60} />\n                <YAxis/>\n                <Line type=\"monotone\" dataKey=\"rate\" stroke=\"#8884d8\" />\n            </LineChart>  \n            </ResponsiveContainer>\n        )\n    }\n\n\n\n  }\n\n  export default PriceChart;","import React, { Component } from \"react\";\n\nimport CrowdsaleTesting from './CrowdsaleTesting'\nimport PriceChart from './PriceChart'\n\n\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid'\nimport TextField from '@material-ui/core/TextField'\n\n\n\nimport BITNCrowdsale from \"./contracts/BITNCrowdsale\"\n\n\n\n\nclass CrowdsaleOwnerPanel extends React.Component{\n\n    constructor (props){\n        super(props);\n\n        this.state = {\n            web3: props.web3,\n            crowdsaleInstance: null,\n            crowdsaleAddress: \"\",\n            accounts: props.accounts,\n            currentRate: 0,\n            newRate: 0,\n            amountOfBITN: 0,\n            amountOfWEI: 0,\n            amountOfETH: 0,\n            priceData: null\n        }\n\n\n        //this.crowdsaleAddress = \"0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb\"\n        //Mainnet\n        this.crowdsaleAddress = \"0x37Ff0201d4f574064d94844e46845BF8dDd1a9C6\"\n\n\n        this.handleChange= this.handleChange.bind(this)\n        this.handleSetRate = this.handleSetRate.bind(this)\n    }\n\n\n\n    componentDidMount(){\n        this.loadCrowdsaleContract().then( (res) => {\n            this.getAvailableBalance();\n        });\n    }\n\n\n    async loadCrowdsaleContract(){\n        const contract = require('truffle-contract')\n        const crowdsaleContract = contract(BITNCrowdsale)\n        crowdsaleContract.setProvider(this.state.web3.currentProvider)\n    \n        \n        await crowdsaleContract.at(this.crowdsaleAddress).then(instance => {\n            console.log(\"Crowdsale contract: \" + crowdsaleContract.address)\n\n            this.setState({\n                crowdsaleInstance: instance\n            });\n\n            this.getCurrentRate();\n            this.getHistoricalPriceData();\n\n        }).catch( (err) => {\n            console.log(\"There was an error: \" + err)\n        })\n    }\n\n\n    async getCurrentRate(){\n        this.state.crowdsaleInstance.getCurrentRate.call().then( (res) => {\n            console.log(res.toString())\n            this.setState({\n                currentRate: res.toString()\n            })\n        }).catch( (err) => {\n            console.log(\"Unable to fetch the current rate\")\n        })\n    }\n\n\n\n    async getAvailableBalance(){\n        this.state.crowdsaleInstance.getAvailableToken.call().then( (res) => {\n\n            console.log(\"Available token: \" + res.toString())\n\n        });\n    }\n\n\n\n    handleSetRate(event){\n        event.preventDefault();\n\n        console.log(\"Setting rate to : \" + this.state.newRate.toString())\n\n        this.state.web3.eth.getAccounts().then( (account) => {\n\n            //this.state.crowdsaleInstance.setRate(this.state.web3.utils.toBN(this.state.newRate).toString(), {from: account[0]}).then( (res) => {\n                this.state.crowdsaleInstance.setRate(this.state.web3.utils.toWei(this.state.newRate, \"wei\"), {from: account[0]}).then( (res) => {\n            \n            console.log(res)\n                this.getCurrentRate();\n            }).catch( (err) => {\n                console.log(err)\n            })\n\n\n\n        })\n\n    }\n\n\n    handleChange(event){\n        this.setState({\n            newRate: String(event.target.value)\n        })\n    }\n\n\n\n\n\n\n\n    render(){\n        return(\n            <Paper \n                elevation={4}\n                style={{ padding: 20, margin: 0, backgroundColor: '#fafafa' }}\n            >  \n                <Grid\n                    container\n                    spacing={1}\n                    direction=\"column\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                >\n                    <Grid item>\n                        {this.state.crowdsaleInstance !== null && (\n                            <PriceChart crowdsaleInstance={this.state.crowdsaleInstance} />\n                        )}\n                    </Grid>\n                    <Grid item>\n                        <Typography variant=\"h4\">Crowdsale Settings</Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography>Current exchange rate: {this.state.currentRate} wei</Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography>Set new rate:</Typography>\n                        <TextField value={this.state.newRate} onChange={this.handleChange}></TextField>\n                        <Button onClick={this.handleSetRate}>Set Rate</Button>\n                    </Grid>\n                    <Grid item>\n                        <CrowdsaleTesting web3={this.state.web3} />\n                    </Grid>\n                </Grid>\n            </Paper>\n        )\n    }\n\n\n}\n\n\nexport default CrowdsaleOwnerPanel;","import React, { Component } from \"react\";\nimport getWeb3 from \"./utils/getWeb3\";\n\nimport TokenSetup from \"./TokenSetup\"\nimport DepositPot from \"./DepositPot\"\nimport ApproveTransfer from \"./ApproveTransfer\"\nimport TokenContext from './TokenContext'\nimport CrowdsaleOwnerPanel from './CrowdsaleOwnerPanel'\n\nimport Grid from '@material-ui/core/Grid'\n\n\n/**\n * @brief Component responsible of managing the contract Owner's feature\n * \n * Interface for the contract's owner feature, like depositing in the pot.\n * \n * It should be displayed only if the fetched account is the owner of the contract\n */\nclass OwnerBox extends Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            web3: props.web3,\n            stakingInstance: props.stakingInstance,\n            accounts: props.accounts,\n            tokenLoaded: props.tokenLoaded,\n            stakingAddress: props.stakingAddress\n        }\n        \n    }\n\n\n    componentDidUpdate(){\n\n    }\n\n\n    render(){\n\n            return(\n                <div>\n                    <Grid\n                    container\n                    spacing={3}\n                    direction=\"column\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    > \n                        <Grid item>\n                            <TokenContext.Consumer>\n                                {context => (\n                                <ApproveTransfer \n                                    tokenAddress={context.address}\n                                    tokenName={context.name}\n                                    tokenSymbol={context.symbol}\n                                    decimals={context.decimals}\n                                    tokenInstance={context.instance}\n                                    accounts={this.state.accounts}\n                                    stakingAddress={this.state.stakingAddress}\n                                    web3={this.state.web3}>\n                                </ApproveTransfer>\n                                )}\n                            </TokenContext.Consumer>\n                        </Grid>\n                        <Grid item>\n                            <TokenContext.Consumer>\n                                {context => (\n                                    <DepositPot \n                                        tokenDecimals={context.decimals}\n                                        tokenSymbol={context.symbol}\n                                        tokenName={context.name}\n                                        tokenInstance={context.instance}\n                                        stakingAddress={this.state.stakingAddress}                                        \n                                        web3={this.state.web3}\n                                        contractInterface={this.state.stakingInstance}\n                                        account={this.state.accounts[0]}> \n                                    </DepositPot>\n                                )}\n                            </TokenContext.Consumer>\n                        </Grid>\n                        <Grid item>\n                            <CrowdsaleOwnerPanel\n                                web3={this.state.web3}\n                                accounts={this.state.accounts}\n                            >  \n                            </CrowdsaleOwnerPanel>\n                        </Grid>\n                    </Grid>\n                </div>\n            );\n        \n    }\n\n\n\n\n}\n\n\nexport default OwnerBox;","import React, { Component } from \"react\";\n\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid'\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nimport PenaltyWithdrawDialog from './PenaltyWithdrawDialog'\n\nimport { withSnackbar } from 'notistack';\nimport { Trans } from \"react-i18next\";\n\n\nclass WithdrawBox extends Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            contractInstance: props.contractInstance,\n            accounts: props.accounts,\n            stakeID: props.stakeID,     //The ID of the stake in the contract\n            amountStaked: 0,\n            referralAddress: 0,\n            withdrawPenalty: 0,\n            selectedAccount: props.accounts[0],\n            withdrawCallback: props.withdrawCallback,\n            loading: false,\n            elasped: true\n        }\n\n\n        this.handlePenaltyWithdraw = this.handlePenaltyWithdraw.bind(this)\n        this.handleDialogClose = this.handleDialogClose.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.setAccount = this.setAccount.bind(this)\n    }\n\n\n\n\n    handleSubmit(event){\n        event.preventDefault();\n\n        this.withdrawTokens();\n\n    }\n\n\n\n    withdrawTokens(){\n\n        this.setState({loading: true})\n        this.state.contractInstance.methods.returnTokens(this.state.stakeID).send({from: this.state.selectedAccount}).then( (result) => {\n\n            this.setState({loading: false})\n            console.log(result)\n\n            if(this.isWithdrawed(this.state.stakeID)){\n                console.log(\"Token successfullu withdrawed\")\n\n                this.state.withdrawCallback();\n\n                this.props.enqueueSnackbar(<Trans i18nKey=\"withdrawBox.tokenSuccesWithdrawMsg\" />, {\n                    variant: 'success',\n                    anchorOrigin: {\n                        vertical: 'bottom',\n                        horizontal: 'left',\n                    },\n                });\n            }else{\n                console.log(\"Unable to withdraw tokens, probably the time is not expired yet\")\n                this.props.enqueueSnackbar(<Trans i18nKey=\"withdrawBox.tokenSuccesWithdrawMsg\" />, {\n                    variant: 'error',\n                    anchorOrigin: {\n                        vertical: 'bottom',\n                        horizontal: 'left',\n                    },\n                });\n            }\n\n\n        }).catch( (err) => {\n            console.log(\"Unable to list active stake; \" + err)\n            this.setState({loadig: false})\n        });        \n    }\n\n\n    async isWithdrawed(_stakeID){\n        await this.state.contractInstance.methods.getStakeInfo(_stakeID).call().then( (result) => {\n\n            let withdrawed = Boolean(result[2])\n            return withdrawed\n        });\n    }\n\n\n    setAccount(_account){\n        this.setState({selectedAccount: _account});\n    }\n\n\n    handleDialogClose(){\n        this.setState({\n            showPenaltyWarning: false\n        })\n    }\n\n\n    handlePenaltyWithdraw(){\n        this.state.withdrawCallback();\n    }\n\n\n    render(){\n\n        if(this.state.loading){\n            return(\n                <CircularProgress />\n            );\n        }\n\n        /*\n                    <AccountLister \n                        accounts={this.state.accounts}\n                        callback={this.setAccount}>\n                    </AccountLister>\n\n\n                <Grid item>\n                    <TextField\n                        required\n                        label=\"Selected Account\"\n                        placeholder=\"500\"\n                        margin=\"normal\"\n                        variant=\"outlined\" \n                        value={this.state.selectedAccount}\n                        InputProps={{\n                            readOnly: true,\n                        }}                            \n                    />\n                </Grid>\n              ) : (\n                    <Grid item>\n                        <PenaltyWithdrawDialog\n                            open={this.state.showPenaltyWarning}\n                            contractInstance={this.state.contractInstance}\n                            accounts={this.state.accounts}\n                            stakeID={this.state.stakeID}\n                            onWithdraw={this.handlePenaltyWithdraw}>\n                        </PenaltyWithdrawDialog>\n                     </Grid>\n\n        */\n\n        return (\n            <Grid \n                container\n                spacing={1}\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"center\"                \n            >\n                    <Grid item>\n                        <Typography color=\"primary\"><Trans i18nKey=\"withdrawBox.withdrawLabel\" /></Typography>\n                    </Grid>\n                    <Grid item>\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.handleSubmit}><Trans i18nKey=\"stake_detail.withdraw\" /></Button>\n                    </Grid>\n\n            </Grid>\n        );\n\n    }\n\n\n}\n\n\nexport default withSnackbar(WithdrawBox);","import React, { Component } from \"react\";\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Typography } from \"@material-ui/core\";\n\n\n\nclass PenaltyWithdrawDialog extends Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            contractInstance: props.contractInstance,\n            accounts: props.accounts,\n            stakeID: props.stakeID,     //The ID of the stake in the contract\n            amountStaked: props.amountStaked,\n            open: false,\n            withdrawPenalty: 0,\n            selectedAccount: props.accounts[0],\n            withdrawCallback: props.withdrawCallback,\n            onWithdrawCallback: props.onWithdraw,     //Callback called when the dialog is closed\n            loading: false,\n        }\n\n        this.handleClickOpen = this.handleClickOpen.bind(this)\n        this.handleClickClose = this.handleClickClose.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n\n    handleClickOpen(){\n      this.setState({\n        open: true\n      })\n    }\n\n    handleClickClose(){\n      this.setState({\n        open: false\n      })\n    }\n\n    handleSubmit(){\n      this.setState({loading: true})\n      this.state.contractInstance.methods.withdrawWithPenalty(this.state.stakeID).send({from: this.state.selectedAccount}).then( (result) => {\n        this.setState({loading: false})\n        this.state.onWithdrawCallback();\n      });\n    }\n\n\n\n    render(){\n         return(\n            <div>\n            <Button variant=\"outlined\" color=\"secondary\" onClick={this.handleClickOpen}>\n                Withdraw with penalty\n            </Button>\n            <Dialog open={this.state.open} onClose={this.handleClickClose} aria-labelledby=\"form-dialog-title\">\n              <DialogTitle id=\"form-dialog-title\">Penalty Warning</DialogTitle>\n                {this.state.loading ? (\n                  <CircularProgress></CircularProgress>\n                ) : (\n                  <DialogContent>\n                    <DialogContentText>\n                        <Typography color=\"error\" component=\"h1\" variant=\"h3\">Warning:</Typography> \n                        <Typography color=\"error\" component=\"h5\" variant=\"h5\">Time is not elasped yet</Typography>\n                        <Typography component=\"body\">\n                          If you withdraw while the time is not elasped yet you wil \n                          incurr in a penalty of 10% of your amount.\n                        </Typography>\n                        <Typography component=\"h5\" variant=\"h5\">\n                          Continue?\n                        </Typography>\n                    </DialogContentText>\n                </DialogContent>\n              )}\n              <DialogActions>\n                {this.state.loading ? (\n                  <div></div>\n                ) : (\n                  <div>\n                    <Button onClick={this.handleClickClose} color=\"primary\">\n                      No\n                    </Button>\n                    <Button onClick={this.handleSubmit} color=\"secondary\">\n                      Yes\n                    </Button>\n                  </div>\n                )}\n\n              </DialogActions>\n            </Dialog>\n          </div>\n        );\n\n\n    }\n\n\n\n}\n\n\nexport default PenaltyWithdrawDialog;\n","import React, { Component } from \"react\";\n\nimport Button from '@material-ui/core/Button';\nimport { Typography } from \"@material-ui/core\";\n\nimport { withSnackbar } from 'notistack';\n\nimport { Trans } from \"react-i18next\";\n\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nconst styles = theme => ({\n    withdrawRewardButton: {\n        background: 'linear-gradient(45deg, #23a644 30%, #024714 90%)',\n        borderRadius: 3,\n        border: 0,\n        color: 'white',\n        //height: 48,\n        padding: '0 30px',\n        boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    },\n  });\n\n\nclass RewardBox extends Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            contractInstance: props.contractInstance,\n            tokenDecimals: props.tokenDecimals,\n            account: props.account,\n            stakeID: props.stakeID,\n            availableReward: props.availableReward,\n            \n        }\n\n\n        this.withdrawRewards = this.withdrawRewards.bind(this)\n    }\n\n\n\n\n    componentDidMount(){\n        this.state.contractInstance.events.PotExhausted().on('data', event => {\n            console.log(\"PotExhausted - Event Received\")\n\n            this.props.enqueueSnackbar(\"Pot Exhausted\", {\n                variant: 'error',\n                anchorOrigin: {\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                },\n            });\n        });\n    }\n\n\n\n    withdrawRewards(){\n        this.state.contractInstance.methods.withdrawReward(this.state.stakeID).send({ from: this.state.account }).then( (rawResult) => {\n\n            console.log(rawResult)\n\n            let result = Boolean(rawResult)\n\n            if(result){\n                console.log(\"Reward successfully withdrawed\");\n            }else{\n                console.log(\"The POT is exhausted!!!!\")\n            }\n\n        }).catch( (err) => {\n            console.log(\"There was an error : \" + err)\n            this.props.enqueueSnackbar(\"Pot Exhausted\", {\n                variant: 'error',\n                anchorOrigin: {\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                },\n            });\n        });\n    }\n\n    \n\n\n    render(){\n\n        const { classes } = this.props;\n\n\n        return(\n            <div>\n                <Typography color=\"textPrimary\"><Trans i18nKey=\"stake_detail.availableRewards\" />: <b>{this.state.availableReward.toString()}</b></Typography>\n                <Button \n                    className={classes.withdrawRewardButton}\n                    onClick={this.withdrawRewards}\n                    >\n                        <Trans i18nKey=\"stake_detail.withdrawReward\" />\n                </Button>\n            </div>\n        )\n    }\n\n}\n\n\n\n\nRewardBox.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\n\nexport default withSnackbar(withStyles(styles)(RewardBox));\n","import React, { Component } from \"react\";\nimport getWeb3 from \"./utils/getWeb3\";\n\n\nimport WithdrawBox from \"./WithdrawBox\"\nimport RewardBox from \"./RewardBox\"\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Grid from '@material-ui/core/Grid'\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport Popover from '@material-ui/core/Popover';\n\n\nimport Cookies from 'universal-cookie';\nimport BigNumber from \"big-number\"\n\nimport UnarchiveIcon from '@material-ui/icons/Unarchive';\nimport ArchiveIcon from '@material-ui/icons/Archive';\nimport { TextField } from \"@material-ui/core\";\n\nimport { Trans } from \"react-i18next\";\n\n\n\nclass StakingDetail extends Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            contractInstance: props.contractInstance,\n            accounts: props.accounts,\n            stakeID: props.stakeID,     //The ID of the stake in the contract\n            periods: 0,\n            amountStaked: 0,\n            referralAddress: 0,\n            wasWithdraw: false,\n            creationTime: 0,\n            referer: 0,\n            gain: 0,\n            penalty: 0,\n            currentAmount: 0,\n            stakeWithdrawAmount: 0,\n            isArchived: props.isArchived,\n            loading: false,\n            tokenDecimals: props.tokenDecimals,\n            showReferer: false,\n            infoLoaded: false,\n\n            viewAmount: 0,\n            elasped: false              //True if the locked time is elasped\n        }\n\n        this.cookies = new Cookies();\n\n        this.archivedCallback = props.archivedCallback;\n        this.timer = null;\n\n\n        this.handleShowReferer = this.handleShowReferer.bind(this)\n        this.handleArchivement = this.handleArchivement.bind(this)\n        this.handleUnarchivement = this.handleUnarchivement.bind(this)\n        this.handleWithdraw = this.handleWithdraw.bind(this)\n    }\n\n\n\n\n    componentDidMount(){\n        //Stake Withdraw  Listener\n        this.state.contractInstance.events.StakeWithdraw().on('data', event => {\n            console.log(\"Stake Withdraw - Event Received\")\n            console.log(event)\n        });\n\n        this.state.contractInstance.events.rewardWithdrawed().on('data', event => {\n            console.log(\"Reward Withdraw - Event Received\")\n            this.fetchStakeInfo();\n        });\n\n        this.fetchStakeInfo();\n        this.isArchived()\n        this.getPeriods();\n        this.getAlreadyWithdrawed();\n    }\n\n\n\n\n    fetchStakeInfo(){\n        this.setState({loading: true});\n        \n        //TODO The staked amount is fetched multiple time, even the parent knows its value\n        this.state.contractInstance.methods.getStakeInfo(this.state.stakeID).call().then( (result) => {\n            \n            //1 - Amount Staked\n            //2 - isWithdrawed\n            //3 - Stake creation time\n            //4 - Referer\n            //5 - Current Amount (compound interest)\n            //6 - Penalty\n\n\n            this.setState({loading: false});\n\n            let _amount = BigNumber(result[0]);\n            let decimals = BigNumber(10).power(this.state.tokenDecimals)\n            _amount = _amount.divide(decimals)\n\n\n            let _currentAmount = BigNumber(result[4])\n            _currentAmount = _currentAmount.divide(decimals)\n\n            let _penalty = BigNumber(result[5])\n            _penalty = _penalty.divide(decimals)\n\n            this.setState({\n                amountStaked: result[0],\n                viewAmount: _amount.toString(),\n                wasWithdraw: Boolean(result[1]),\n                creationTime: result[2],\n                referer: result[3],\n                currentAmount: _currentAmount,\n                penalty: _penalty,\n                infoLoaded: true\n            }, () => {\n                this.calculateTime()\n                this.forceUpdate();\n            });\n\n        }).catch( (err) => {\n            console.log(\"Unable fetch Stake (\" + this.state.stakeID + \"); \" + err)\n        });\n        \n    }\n\n\n    calculateTime(){\n        var standardTimeLocked, standardCreationTime\n        try{\n            standardCreationTime = new Date(this.state.creationTime * 1000);\n        }catch(err){\n            console.log(\"Error while processing time\")\n            return;\n        }\n\n\n        if(Date.now() > standardTimeLocked){\n            this.setState({elasped: true,\n                           creationTimeString: standardCreationTime.toString()\n                         });\n        }else{\n            this.setState({elasped: false,\n                creationTimeString: standardCreationTime.toString(),\n              });            \n        }\n\n    }\n\n\n\n\n    getPeriods(){\n        this.state.contractInstance.methods.calculatePeriods(this.state.stakeID).call().then( (result) => {\n            let _periods = Number(result);\n            console.log(\"Periods\")\n            console.log(result)\n            this.setState({\n                periods: _periods\n            })\n        }).catch( (err) => {\n            console.log(\"Unable to fetch periods: \" + err)\n        })\n    }\n\n\n    calculateGain(){\n        let reward = this.state.currentAmount - this.state.amountStaked;\n\n        this.setState({\n            gain: reward\n        })\n    }\n\n\n    getAlreadyWithdrawed(){\n        this.state.contractInstance.methods.getAlreadyWithdrawedAmount(this.state.stakeID).call().then( (result) => {\n            console.log(result)\n            if(Boolean(result)){\n                console.log(\"Already Withdrawed\")\n            }else{\n                console.log(\"Availabel to be Withdrawed\")\n            }\n            \n        }).catch( (err) => {\n            console.log(\"Unable to fetch periods: \" + err)\n        })        \n    }\n\n\n    startTimer() {\n        this.timer = setInterval(() => {\n            this.calculateTime();\n        }, 1000)\n    }\n\n    //TODO Betterm management of archived stakes\n\n    handleArchivement(){\n        this.cookies.set(\"stake\" + this.state.stakeID, \"archived\", {path: \"/\"});\n        this.archivedCallback();\n        this.setState({isArchived: true})\n    }\n\n\n    handleUnarchivement(){\n        this.cookies.set(\"stake\" + this.state.stakeID, \"unarchived\", {path: \"/\"});\n        this.archivedCallback();\n        this.setState({isArchived: false})\n\n    }\n\n    isArchived(){\n        let string_value = this.cookies.get('stake' + this.state.stakeID)\n        let value = (string_value === \"archived\")\n        return value;\n    }\n\n\n    handleWithdraw(){\n        this.setState({\n            wasWithdraw: true\n        })\n    }\n\n\n\n    handleShowReferer(){\n        let currentValue = this.state.showReferer;\n\n        this.setState({\n            showReferer: !currentValue\n        })\n    }\n\n\n    render(){\n\n\n        if(this.state.loading){\n            return(\n                <CircularProgress />\n            );\n        }\n\n\n        return (\n            \n            <Grid\n                container\n                spacing={1}\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"center\"\n            >\n                <Grid item>\n                    <Typography><Trans i18nKey=\"stake_detail.amountStaked\" /> : <b>{this.state.viewAmount}</b></Typography>\n                    <Typography><Trans i18nKey=\"stake_detail.periodElasped\" />: <b>{this.state.periods}</b></Typography>\n                    <Typography><Trans i18nKey=\"stake_detail.penalty\" />: <b>{this.state.penalty.toString()}</b></Typography>\n\n\n                    {/*<Typography><Trans i18nKey=\"stake_detail.gain\" />: <b color=\"green\">{this.state.gain}%</b></Typography>*/}\n                    <Typography><Trans i18nKey=\"stake_detail.withdrawed\" />: <b>{this.state.wasWithdraw ? \"YES\" : \"NO\"}</b></Typography>\n                </Grid>\n\n                <Grid item>\n                    <Typography color=\"textSecondary\"><Trans i18nKey=\"stake_detail.creationTime\" />: <b>{this.state.creationTimeString}</b></Typography>\n                </Grid> \n                <Grid item>\n                {!this.state.wasWithdraw ? (\n                    <Grid \n                        container\n                        spacing={1}\n                        direction=\"column\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                    >\n                        <Grid item>\n                            {this.state.infoLoaded && (\n                                    <RewardBox\n                                        stakeID={this.state.stakeID}\n                                        contractInstance={this.state.contractInstance}\n                                        account={this.state.accounts[0]}\n                                        availableReward={this.state.currentAmount}\n                                        tokenDecimals={this.state.tokenDecimals}  \n                                    >\n                                    </RewardBox>\n                            )}\n                        </Grid>\n\n                        <Grid item>\n                            <WithdrawBox \n                                stakeID={this.state.stakeID} \n                                contractInstance={this.state.contractInstance} \n                                accounts={this.state.accounts}\n                                withdrawCallback={this.handleWithdraw}\n                                >\n                            </WithdrawBox>\n                        </Grid>\n                    </Grid>\n\n                ) : (\n\n                    <div>\n                        {this.isArchived() ? (\n                            <Button \n                                variant=\"outlined\" \n                                color=\"inherit\" \n                                onClick={this.handleUnarchivement}\n                                startIcon={<UnarchiveIcon />}\n                                >\n                                    Unarchive\n                            </Button>\n                        ) : (\n                            <Button \n                                variant=\"outlined\" \n                                color=\"inherit\" \n                                onClick={this.handleArchivement}\n                                startIcon={<ArchiveIcon />}\n                                >\n                                    Archive\n                            </Button>\n                        )}\n                    </div>\n\n                )}  \n                </Grid>\n            </Grid>\n        );\n\n    }\n\n\n}\n\n\nexport default StakingDetail;","import React, { Component } from \"react\";\nimport StakingDetail from \"./StakingDetail\"\n\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Grid from '@material-ui/core/Grid'\n\nimport Cookies from 'universal-cookie';\nimport BigNumber from \"big-number\"\n\n\nimport AttachMoneyIcon from '@material-ui/icons/AttachMoney';\nimport NotInterestedIcon from '@material-ui/icons/NotInterested';\n\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nconst styles = theme => ({\n    expansionPanel: {\n        //background: 'linear-gradient(#3b3735 19%, #FFFFFF 15% )',\n        //backgroundImage:\n        //'url(\"https://media.istockphoto.com/photos/plant-growing-picture-id510222832?k=6&m=510222832&s=612x612&w=0&h=Pzjkj2hf9IZiLAiXcgVE1FbCNFVmKzhdcT98dcHSdSk=\")',\n        borderRadius: 3,\n        border: 2,\n        //height: 48,\n        padding: '0 30px',\n        boxShadow: '0 3px 5px 2px rgba(18, 30, 29, .5)',\n    },\n  });\n\n\nclass StakingEntry extends Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            contractInstance: props.contractInstance,\n            accounts: props.accounts,\n            stakeID: props.stakeID,     //The ID of the stake in the contract\n            tokenDecimals: props.tokenDecimals,\n            timeLocked: 0,\n            compoundReward: 0,\n            amountStaked: 0,\n            referralAddress: 0,\n            moreDetail: false,\n            isArchived: props.isArchived\n        }\n\n        this.cookies = new Cookies();\n\n\n\n        this.detailBox = (\n            <p></p>\n        );\n\n\n        this.handleDetailView = this.handleDetailView.bind(this);\n        this.handleArchivement = this.handleArchivement.bind(this);\n    }\n\n\n\n    componentDidMount(){\n        this.getStakeAmount();\n        this.getStakeTime();\n        this.getCompoundReward();\n    }\n\n\n\n    async getStakeAmount() {\n        \n        this.state.contractInstance.methods.getCurrentStakeAmount(this.state.stakeID).call().then( (result) => {\n            let _amount = BigNumber(result);\n\n            let decimals = BigNumber(10).power(this.state.tokenDecimals)\n            _amount = _amount.divide(decimals)\n\n\n            this.setState({amountStaked: _amount.toString()}, () => {\n\n            });\n        }).catch( (err) => {\n            console.log(\"Unable to get stake amound for ID \" + this.state.stakeID + \"; \" + err)\n        });\n        \n    }\n\n\n    async getStakeTime() {\n        /*\n        this.state.contractInstance.methods.getCurrentStakeTime(this.state.stakeID).call().then( (result) => {\n            let timeLocked = Number(result);\n            this.setState({timeLocked: timeLocked}, () => {\n\n            });\n        }).catch( (err) => {\n            console.log(\"Unable to list active stake; \" + err)\n        });\n        */\n    }\n\n\n    async getCompoundReward() {\n        this.state.contractInstance.methods.calculateCompoundInterest(this.state.stakeID).call().then( (result) => {\n            console.log(result)\n        }).catch( (err) => {\n            console.log(\"Unable get compound reward; \" + err)\n        });        \n    }\n\n\n\n    handleDetailView() {\n        if(this.state.moreDetail === true)\n            this.setState({moreDetail: false})\n        else\n            this.setState({moreDetail: true})\n    }\n\n\n    handleArchivement(){\n        //TODO Handle archivement auto-hide\n        //this.setState({isArchived: true});\n    }\n\n\n    render(){\n\n        const { classes } = this.props;\n\n\n\n        if(this.state.moreDetail){\n            this.detailBox = (\n                <StakingDetail \n                    stakeID={this.state.stakeID} \n                    contractInstance={this.state.contractInstance} \n                    accounts={this.state.accounts}\n                    archivedCallback={this.handleArchivement}\n                    tokenDecimals={this.state.tokenDecimals}\n                    isArchived={this.state.isArchived}\n                    ></StakingDetail>\n            );\n        }else{\n            this.detailBox = (\n                <div></div>\n            )\n        }\n\n\n\n        return (\n            <ExpansionPanel \n                onChange={this.handleDetailView}\n                className={classes.expansionPanel}\n                >\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls=\"panel-content\"\n                    id=\"panel-header\"\n                >\n                    {this.state.isArchived ? (\n                        <NotInterestedIcon />\n                    ) : (\n                        <AttachMoneyIcon />\n                    )}\n                    <Typography variant=\"body1\" component=\"h6\" color=\"textPrimary\"> Amount Staked: <b>{this.state.amountStaked}</b></Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                    <Grid container>\n                        {this.detailBox}\n                    </Grid>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        );\n\n    }\n\n\n}\n\n\nStakingEntry.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\n\nexport default withStyles(styles)(StakingEntry);","import React, { Component } from \"react\";\n\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\n\n\nimport BigNumber from 'big-number'\n\nimport { Trans } from \"react-i18next\";\n\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nconst styles = theme => ({\n    box: {\n        color: 'orange',\n        colorDefault: 'black',\n        background : '#2e3b55d6',\n        borderRadius: 15,\n        border: 2,\n        padding: 20, \n        margin: 0, \n        boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    },\n  });\n\nclass StakeInfo extends Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            viewAmount: 0,\n            referral: props.referral,\n            amountStaked: props.amountStaked,\n            numberOfStake: props.stakeNumber,\n            tokenDecimals: props.tokenDecimals,\n            hasReferral: true\n        }\n\n        console.log(props)\n    }\n\n\n    componentDidMount(){\n        let _amount = BigNumber(this.props.amountStaked);\n        let decimals = BigNumber(10).power(this.state.tokenDecimals)\n        _amount = _amount.divide(decimals)\n\n        \n        let _referral = \"\"\n\n        if(this.props.referral === \"\"){\n            this.setState({\n                referral: \"No\",\n                hasReferral: false\n            })\n        }\n\n        this.setState({\n            viewAmount: _amount.toString(),\n        })\n\n    }\n\n/*\n\n                <Grid item>\n                    {this.state.referer === \"0x0000000000000000000000000000000000000001\" ? (\n                        <Typography color=\"textSecondary\">Referer: <b>No</b></Typography>\n                    ) : (\n                        <Typography color=\"textSecondary\">Referer: <Button onClick={this.handleShowReferer}>{refButton}</Button></Typography>\n                    )}\n                </Grid>\n                <Grid item>\n                    {this.state.showReferer && (\n                        <TextField\n                            label=\"Referer Address\"\n\n                            value={this.state.referer}>\n                        </TextField>\n                    )}\n                </Grid>\n\n*/\n\n\n    render(){\n\n        const { classes } = this.props;\n\n\n        return(\n            <Paper\n            elevation={4}\n            className={classes.box}>\n                    <Typography variant=\"body1\" component=\"p\"><Trans i18nKey=\"account_info.totalAmount\" />: <b>{this.state.viewAmount}</b></Typography>\n                    <Typography variant=\"body1\" component=\"p\"><Trans i18nKey=\"account_info.numberOfActiveStake\" />: <b>{this.state.numberOfStake}</b></Typography>\n                    <Typography variant=\"body1\" component=\"p\">\n                        <Trans i18nKey=\"account_info.noReferralPresent\" />: \n                            {this.state.hasReferral ? (\n                                <TextField value={this.state.referral}></TextField>\n                            ) : (\n                                <b>No</b>\n                            )}\n\n                        </Typography>\n\n            </Paper>\n        )\n\n    }\n\n\n}\n\n\nStakeInfo.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(StakeInfo);","import React, { Component } from \"react\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport StakingEntry from \"./StakingEntry\"\nimport AccountInfo from './AccountInfo'\nimport TokenContext from './TokenContext'\n\n\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\n\nimport Switch from '@material-ui/core/Switch';\n\nimport green from '@material-ui/core/colors/purple';\n\nimport Cookies from 'universal-cookie';\nimport ViewListIcon from '@material-ui/icons/ViewList';\n\nimport { translate, Trans } from \"react-i18next\";\n\n\n\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nconst styles = theme => ({\n    archivedSwitch: {\n        color: green[300],\n        '&$colorChecked': {\n            color: green[500],\n            '& + $colorBar': {\n            backgroundColor: green[500],\n            },\n        }\n    }\n  });\n\n\nclass StakingLister extends Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            contractInstance: props.contractInstance,\n            accounts: props.accounts,\n            numberOfStake: -1,\n            numberOfActiveStake: 0,\n            totalAmountStaked: 0,\n            stakingList: \"\",\n            showArchived: false,\n            referral: \"\",\n            referralLoaded: false,\n            tokenDecimals: props.tokenDecimals,\n            tokenSymbol: props.tokenSymbol\n        }\n\n        this.cookies = new Cookies();\n\n        this.handleShowArchived = this.handleShowArchived.bind(this)\n    }\n\n\n\n    componentDidMount(){\n\n        //Listeners\n        this.state.contractInstance.events.NewStake().on('data', event => {\n            console.log(\"New Stake - Event Received\")\n            this.newStakeListener(event);\n        });\n\n        this.state.contractInstance.events.StakeWithdraw().on('data', event => {\n            console.log(\"Stake Withdraw - Event Received\")\n            this.newWithdrawListener(event);\n        });\n\n\n        this.listActiveStake().then( () => {\n            this.populateStakingList();\n        });\n        \n        this.getTotalStake();\n\n        this.getActiveStakeNumber();\n\n        this.hasReferral();\n    }\n\n\n\n\n    async listActiveStake() {\n        \n        await this.state.contractInstance.methods.getStakeCount().call().then( (result) => {\n            var _numberOfStake = Number(result);\n            console.log(\"Number of stakes: \" + _numberOfStake)\n            this.setState({numberOfStake: _numberOfStake});\n            this.forceUpdate()\n        }).catch( (err) => {\n            console.log(\"Unable to list stake; \" + err)\n        });\n        \n    }\n\n    async getActiveStakeNumber() {\n        \n        await this.state.contractInstance.methods.getActiveStakeCount().call().then( (result) => {\n            var _numberOfActiveStake = Number(result);\n            console.log(\"Number of active stakes: \" + _numberOfActiveStake)\n            this.setState({numberOfActiveStake: _numberOfActiveStake});\n        }).catch( (err) => {\n            console.log(\"Unable to list active stake; \" + err)\n        });\n        \n    }\n\n    async getTotalStake() {\n        await this.state.contractInstance.methods.getTotalStakeAmount().call().then( (result) => {\n            console.log(\"getTotalStake: \" + result)\n            let _totalStake = Number(result);\n            this.setState({totalAmountStaked: _totalStake}, () => {\n\n            });\n        }).catch( (err) => {\n            console.log(\"Unable to list active stake; \" + err)\n        });\n    }\n\n\n\n\n\n\n    newStakeListener(event) {\n        this.getTotalStake();\n        this.listActiveStake();\n        this.updateUI()\n    }\n\n\n    newWithdrawListener(event){\n        this.getTotalStake();\n        this.listActiveStake();\n        this.updateUI()\n    }\n    \n\n    populateStakingList(){\n\n        let list = []\n\n        for(let i=0; i<this.state.numberOfStake; i++){\n            console.log(\"Staking number \" + i)\n\n            let archived\n            let archived_string = this.cookies.get('stake' + i)\n\n            console.log(archived_string)\n\n            if(archived_string === \"archived\"){\n                archived = true;\n            }else if (archived_string === \"unarchived\"){\n                archived = false;   \n            }else{\n                //If it not exists set to \"unarchived\"\n                if(typeof this.state.stakeID !== \"undefined\"){\n                    this.cookies.set(\"stake\" + this.state.stakeID, \"unarchived\", {path: \"/\"});\n                    archived = false;\n                }\n            }\n            \n            \n            console.log(\"Is \"+ i + \" archived? -> \" + Boolean(archived)  )\n\n\n\n\n            if(archived && !this.state.showArchived){\n                console.log(\"Detected archived stake at \" + i   )\n                continue;\n            }\n\n            console.log(\"Pushinng stake : \" + i)\n            list.push(\n                    <StakingEntry \n                        stakeID={i} \n                        contractInstance={this.state.contractInstance} \n                        accounts={this.state.accounts}\n                        isArchived={archived}\n\n                        tokenDecimals={this.state.tokenDecimals}\n                        tokenSymbol={this.state.tokenSymbol}\n                        >\n                    </StakingEntry>\n            );\n        }\n\n        console.log(list)\n\n        this.setState({\n            stakingList: list\n        })\n\n        this.forceUpdate();\n    }\n\n\n\n    updateUI(){\n        this.listActiveStake().then( () => {\n            this.getTotalStake().then( () => {\n                this.populateStakingList();\n            });\n        });\n    }\n\n\n    handleShowArchived(){\n        let currentValue = this.state.showArchived\n\n        this.setState({\n            showArchived: !currentValue\n        })\n        this.updateUI();\n    }\n\n\n    async hasReferral(){\n\n        await this.state.contractInstance.methods.hasReferral().call().then( (result) => {\n            console.log(\"Has referral\")\n            console.log(result);\n\n            let boolResult = Boolean(result);\n\n            if(boolResult){\n                this.getReferral();\n            }else{\n                this.setState({\n                    referralLoaded: true,\n                    referral: \"\"\n                })\n            }\n\n        }).catch( (err) => {\n            console.log(\"Unable to list active stake; \" + err)\n        });\n\n\n\n    }\n\n\n    async getReferral(){\n\n        await this.state.contractInstance.methods.getMyReferral().call().then( (result) => {\n            let myReferral = result\n            console.log(\"Referral: \"+ myReferral)\n            this.setState({\n                    referralLoaded: true,\n                    referral: myReferral\n            })\n        }).catch( (err) => {\n            console.log(\"Fetch referral address; \" + err)\n        });\n\n    }\n\n\n\n    render(){\n\n        const { classes } = this.props;\n\n\n        return (\n            <Paper \n            elevation={4}\n            style={{ padding: 20, margin: 0, backgroundColor: '#fafafa' }}\n            >  \n                <Grid\n                    container\n                    spacing={1}\n                    direction=\"column\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                >\n                    <Grid item>\n                        <Grid container direction=\"row\" alignItems=\"center\">\n                            <ViewListIcon />\n                            <Typography variant=\"h4\" component=\"h4\"><Trans i18nKey=\"staking_list.title\" /></Typography>\n                        </Grid>\n                    </Grid>\n                    <Grid item>\n                        {this.state.referralLoaded & this.state.numberOfActiveStake !== -1 && (\n                            <AccountInfo\n                            stakeNumber={this.state.numberOfActiveStake}\n                            amountStaked={this.state.totalAmountStaked}\n                            referral={this.state.referral}\n                            tokenDecimals={this.state.tokenDecimals}\n                            ></AccountInfo>\n                        )}\n\n                        <Trans i18nKey=\"staking_list.showArchived\" />\n                        <Switch\n                            checked={this.state.showArchived}\n                            onChange={this.handleShowArchived}\n                            value={this.state.showArchived}\n                            //inputProps={{ 'aria-label': 'secondary checkbox' }}\n                            className={classes.archivedSwitch}\n                        />               \n                    </Grid>\n                    <Grid item>\n                        {this.state.stakingList === \"\" ? (\n                            <Typography color=\"textSecondary\"><Trans i18nKey=\"staking_list.noStakePresent\" /></Typography>\n                        ): (\n                            this.state.stakingList\n                        )}\n                    </Grid>\n                </Grid>\n            </Paper>\n        );\n\n    }\n\n\n}\n\n\nStakingLister.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\n\nexport default withStyles(styles)(StakingLister);","import React, { Component } from \"react\";\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid'\nimport Checkbox from '@material-ui/core/Checkbox';\nimport InputAdornment from '@material-ui/core/InputAdornment';\n\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport LockIcon from '@material-ui/icons/Lock';\n\nimport PropTypes from 'prop-types';\n\n\nimport BigNumber from \"big-number\"\nimport { Trans } from \"react-i18next\";\n\n\nimport { withSnackbar } from 'notistack';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nconst styles = theme => ({\n    bar: {\n      color: 'orange',\n      colorDefault: 'black',\n      background : '#2E3B55'\n    },\n    stakeButton: {\n        background: '#ff551f',\n        color: \"#efeded\",\n        border: \"1 px solid\",\n        borderColor: \"rgba(43, 43, 43, 0.5)\",\n        \"&:hover, &.Mui-focusVisible\": { \n            backgroundColor: \"#f77f5ae8\",\n            color: \"#000000\",\n            border: \"1 px solid\",\n            borderColor: \"rgba(43, 43, 43, 0.5)\",\n        }\n    },\n    checkBoxReferral: {\n        \"&:checked, &.Mui-checked\": {\n            color: \"#cf5d26\"\n        }\n    }\n  });\n  \n\nclass StakingForm extends Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            contractInstance: props.contractInstance,\n            account: props.account,\n            tokenInstance: props.tokenInstance,\n            tokenDecimals: props.tokenDecimals,\n            stakingAddress: props.stakingAddress,\n            amountToStake: 100,\n            tokenBalance: 0,\n            showReferralInput: false,\n            hasReferral: false,\n            hasAllowance: false,\n            allowanceValue: 0,\n            referralAddress: \"\",\n            loading: false,                      //Display the loading icon during contract request,\n            approvementConfirmed: false\n        }\n\n\n        this.web3 = props.web3\n\n        this.handleAmountChange = this.handleAmountChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleReferralCheckbox = this.handleReferralCheckbox.bind(this)\n        this.handleReferralAddress = this.handleReferralAddress.bind(this)\n    }\n\n\n    componentDidMount(){\n        this.hasReferral();\n        this.checkAllowance();\n        this.getTokenBalance();\n    }\n\n\n    handleAmountChange(event){\n        let _amountToStake = Number(event.target.value)\n\n        let decimals = BigNumber(10).pow(this.state.tokenDecimals)\n\n        let result = BigNumber(_amountToStake).multiply(decimals)\n\n        let finalAmount = this.web3.utils.toBN(result.toString())\n\n        this.setState({\n            amountToStake: _amountToStake,\n            finalAmount: finalAmount\n        })\n    }\n\n\n    handleReferralCheckbox(event){\n        if(event.target.checked === true)\n            this.setState({showReferralInput: true})\n        else\n            this.setState({showReferralInput: false})\n    }\n\n    handleReferralAddress(event){\n        this.setState({referralAddress: event.target.value})\n    }\n\n    async getTokenBalance(){\n        await this.state.tokenInstance.balanceOf(this.state.account).then( (response) => {\n            console.log(response);\n\n            let decimals = BigNumber(10).pow(this.state.tokenDecimals)\n\n            let viewBalance = BigNumber(response.toString()).divide(decimals)\n\n            this.setState({tokenBalance: viewBalance.toString()})\n\n        }).catch( (err) =>{\n            console.log(err );\n        });\n    }\n\n\n    handleSubmit(event){\n        event.preventDefault();\n        console.log(this.state.finalAmount)\n        if(typeof this.state.finalAmount == \"undefined\"){\n            console.log(\"Invalid amount\")\n            this.props.enqueueSnackbar(<Trans i18nKey=\"staking_form.errorUndefinedStake\" />, {\n                variant: 'warning',\n                anchorOrigin: {\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                },\n            });\n            return;\n        }\n\n        this.checkAllowance();\n\n\n\n        console.log(this.state.allowanceValue)\n        if(this.state.amountToStake > this.state.allowanceValue){\n            this.props.enqueueSnackbar(<Trans i18nKey=\"staking_form.errorNoAllowance\" />, {\n                variant: 'error',\n                anchorOrigin: {\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                },\n            });\n            return;\n        }\n\n        console.log(this.state.tokenBalance)\n        if(this.state.amountToStake > this.state.tokenBalance){\n            this.props.enqueueSnackbar(<Trans i18nKey=\"staking_form.errorInsufficientFunds\" />, {\n                variant: 'error',\n                anchorOrigin: {\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                },\n            });\n            return\n        }\n\n\n        \n        this.activateStake(); \n    }\n\n\n    async checkAllowance(){\n        \n        if(this.state.tokenInstance == null){\n            console.log(\"The contract is not instantiated yet\")\n            return;\n        }\n\n\n        this.setState({loading: true})\n\n        await this.state.tokenInstance.allowance(this.state.account, this.state.stakingAddress).then( (amountAllowed) => {\n            if(!amountAllowed.isZero()){\n                console.log(\"Has positive allowance\");\n\n                //Calculating the current allowance\n                let decimals = BigNumber(10).pow(this.state.tokenDecimals)\n\n                let viewBalance = BigNumber(amountAllowed.toString()).divide(decimals)\n    \n                this.setState({\n                    allowanceValue: viewBalance.toString(),\n                    hasAllowance: true,\n                    loading: false\n                })\n\n                console.log(this.state.allowanceValue)\n            }else{\n                console.log(\"Has negative allowance\");\n                this.setState({\n                    hasAllowance: false,\n                    loading: false,\n                    allowanceValue: 0\n                })\n            }\n        }).catch( (err) =>{\n            console.log(err);\n            this.setState({loading: false})\n        });\n\n    }\n\n\n\n\n    async activateStake(){\n\n\n        var _referralAddress = \"0x0000000000000000000000000000000000000001\";\n\n        if(!this.state.hasReferral && this.state.showReferralInput)\n            _referralAddress = this.state.referralAddress\n\n        this.setState({loading: true})\n\n        this.state.contractInstance.methods.stakeToken(this.state.finalAmount.toString(), _referralAddress).send({ from: this.state.account }).then( (result) => {\n            console.log(\"Correctly staked \" + this.state.amountToStake + \" tokens\")\n            this.setState({\n                loading: false,\n                approvementConfirmed:false\n            })\n\n\n\n            this.props.enqueueSnackbar(<Trans i18nKey=\"staking_form.correctStake\" />, {\n                variant: 'success',\n                anchorOrigin: {\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                },\n            });\n\n\n            this.hasReferral(); //Used to hide the Referral input\n\n        }).catch( (err) => {\n            console.log(\"Unable to stake; \" + err)\n            this.setState({loading: false})\n            this.props.enqueueSnackbar(<Trans i18nKey=\"staking_form.unableToStake\" />, {\n                variant: 'error',\n                anchorOrigin: {\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                },\n            });\n        });\n\n    }\n\n\n    async hasReferral(){\n        this.state.contractInstance.methods.hasReferral().call().then( (result) => {\n            this.setState({\n                hasReferral: Boolean(result)\n            })\n        }).catch( (err) => {\n            console.log(\"Unable to fetch if the account has referral\")\n        });        \n    }\n\n\n    render(){\n\n        const { classes } = this.props;\n\n\n        let referral_input\n\n        if (this.state.showReferralInput === true){\n            referral_input = (\n                <Grid item>\n                    <TextField\n                                label={<Trans i18nKey=\"staking_form.referralPlaceholder\" />}\n                                margin=\"normal\"\n                                variant=\"outlined\" \n                                onChange={this.handleReferralAddress}\n                                value={this.state.referralAddress}                               \n                    /> \n                </Grid>\n            );\n        }\n\n        /*\n        if(this.state.loading){\n            return(\n                <div>\n                    <CircularProgress />\n                    {this.state.approvementConfirmed && (\n                        <Typography>Approvement granted, waiting for the contract transaction...</Typography>\n                    )}\n                </div>\n            );\n        }\n        */\n\n\n        /*\n        if(!this.state.hasAllowance){\n\n            return (\n                <div>\n                    <Typography>Currently you have no allowance, please set a value in the \"Approvement\" panel</Typography>\n                </div>\n            )\n\n        }\n        */\n\n        return (\n            <div>\n                <Grid\n                    container\n                    spacing={1}\n                    direction=\"column\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                >\n                    <Grid item>\n                        <TextField\n                                type=\"number\"\n                                required\n                                label={<Trans i18nKey=\"staking_form.textBoxHelper\" />}\n                                margin=\"normal\"\n                                variant=\"outlined\" \n                                onChange={this.handleAmountChange}\n                                value={this.state.amountToStake}  \n                                autoFocus \n                                inputProps={{ min: \"100\", max: \"100000\", step: \"1\" }}\n                        />\n                    </Grid>\n\n                    <Grid item>\n\n                    </Grid>\n                    {!this.state.hasReferral && ( \n                    <Grid item>\n                        <Grid \n                            container\n                            direction=\"row\"\n                            justify=\"center\"\n                            alignItems=\"center\"\n                            >\n                            <Grid item>\n                                <Typography variant=\"body1\" component=\"p\"><Trans i18nKey=\"staking_form.referralCheckbox\" /></Typography>\n                            </Grid>\n                            <Grid item>\n                                <Checkbox\n                                    checked={this.state.showReferralInput}\n                                    onChange={this.handleReferralCheckbox}\n                                    checked={this.state.showReferralInput}\n                                    inputProps={{\n                                    'aria-label': 'primary checkbox',\n                                    }}\n                                    className={classes.checkBoxReferral}\n                                />\n                            </Grid>\n                        </Grid>\n\n                        {referral_input}\n                    </Grid>\n                    )}\n                    <Grid item>\n                        <Button \n                            variant=\"contained\" \n                            color=\"secondary\" \n                            onClick={this.handleSubmit}\n                            startIcon={<LockIcon />}\n                            className={classes.stakeButton}                            \n\n                            >\n                                Stake\n                            </Button>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n\n    }\n\n\n}\n\n\n\nStakingForm.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\n\nexport default withSnackbar( withStyles(styles)(StakingForm));","import React, { Component } from \"react\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport StakingLister from \"./StakingLister\"\nimport StakingForm from \"./StakingForm\"\n\nimport ViewListIcon from '@material-ui/icons/ViewList';\n\n\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\n\n\nimport TokenContext from './TokenContext'\nimport ApproveInfo from \"./ApproveInfo\"\n\nimport { translate, Trans } from \"react-i18next\";\n\n\n\nclass StakingPanel extends Component{\n\n    constructor(props){\n        super(props);\n\n        console.log(props);\n\n        this.state = {\n            tokenAddress: props.tokenAddress,\n            contractInterface: this.props.contractInterface,\n            stakingAddress: props.stakingAddress,\n            accounts: props.accounts,\n            account: props.accounts[0],\n            subscriptionEnded: false\n        }\n\n        this.newStakeHandler = this.newStakeHandler.bind(this)      \n\n    }\n\n\n\n    componentDidMount(){\n        this.checkSubscriptionEnd();\n    }\n\n\n\n    newStakeHandler(){\n        this.forceUpdate();\n    }\n\n        \n\n\n    checkSubscriptionEnd(){\n        this.state.contractInterface.methods.isSubscriptionEnded().call().then( (result) => {\n            console.log(result)\n            console.log(\"Subscription ended?  \" + result);\n            this.setState({\n                subscriptionEnded: Boolean(result)\n            })\n        }).catch ( (err) => {\n            console.log(err)\n        });\n    }\n\n\n\n\n    render(){\n\n        console.log(this.state.subscriptionEnded)\n\n        return (\n            <Paper \n                elevation={4}\n                style={{ padding: 20, margin: 0, backgroundColor: '#fafafa' }}\n            >  \n                <Grid\n                    container\n                    spacing={1}\n                    direction=\"column\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                >\n                    {!this.state.subscriptionEnded ? (\n                        <div>\n                        <Grid item>  \n                            <Typography color=\"textPrimary\" variant=\"h4\"><Trans i18nKey=\"staking_form.title\" /></Typography>\n                            <Typography color=\"textSecondary\">\n                                <Trans i18nKey=\"staking_form.subtitle\" />\n                            </Typography>\n                            <ApproveInfo></ApproveInfo>\n                        </Grid>\n                        <Grid item>\n                            <TokenContext.Consumer>\n                                        {context => (\n                                            <StakingForm \n                                                tokenAddress={context.address}\n                                                tokenName={context.name}\n                                                tokenSymbol={context.symbol}\n                                                tokenInstance={context.instance}\n                                                stakingAddress={this.state.stakingAddress}\n                                                web3={context.web3}\n                                                contractInstance={this.state.contractInterface} \n                                                account={this.state.account}\n                                                newStakeHandler={this.newStakeHandler}\n                                                tokenDecimals={context.decimals}>\n                                            </StakingForm>\n                                        )}\n                            </TokenContext.Consumer>\n                        </Grid>\n                        </div>\n                    ) : (\n                        <div>\n                            <Typography>Subscription ended</Typography>\n                        </div>\n                    )}\n\n                </Grid>\n            </Paper>\n        );\n\n    }\n\n}\n\n\nexport default StakingPanel;","import React, { Component } from \"react\";\n\nimport { Typography } from \"@material-ui/core\";\nimport Link from '@material-ui/core/Link';\n\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Container from '@material-ui/core/Container';\nimport BigNumber from \"big-number\"\n\nimport { Trans } from \"react-i18next\";\n\n\n\n\nclass ReferralEntry extends Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            contractInstance: props.contractInstance,\n            tokenDecimals: props.tokenDecimals,\n            account: props.account,\n            referredAddress: props.referredAddress,\n            stakeID: null,\n            availableReward: 0,\n          \n        }\n\n\n        this.withdrawRewards = this.withdrawRewards.bind(this)\n    }\n\n\n    componentDidMount(){\n        this.fetchReferralReward();\n    }\n\n\n    withdrawRewards(){\n\n    }\n\n\n    fetchReferralReward(){\n        this.state.contractInstance.methods.calculateRewardReferral(this.state.referredAddress).call().then( (rawResult) => {\n            console.log(rawResult)\n\n            let decimals = BigNumber(10).power(this.state.tokenDecimals);\n            let realAmount = BigNumber(rawResult).divide(decimals);\n\n            this.setState({\n                availableReward: realAmount.toString()\n            })\n        }).catch( (err) => {\n            console.log(\"Unable to calculate\")\n        });\n    }  \n\n\n    render(){\n        return(\n            <Container maxWidth=\"sm\">\n                <Link href={\"https://etherscan.io/address/\"+ this.state.referredAddress} id=\"list-elem\">\n                    <ListItemText primary={this.state.referredAddress} />\n                </Link>\n                <Typography color=\"textSecondary\"><Trans i18nKey=\"referral_panel.availableReward\" />: {this.state.availableReward}</Typography>\n            </Container>\n        )\n    }\n\n}\n\n\nexport default ReferralEntry;\n","import React, { Component } from \"react\";\n\n\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nimport BigNumber from \"big-number\"\n\nimport ReferralEntry from './ReferralEntry'\n\nimport GetAppIcon from '@material-ui/icons/GetApp';\n\n\nimport { Trans } from \"react-i18next\";\n\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { TextField } from \"@material-ui/core\";\n\n\n\nclass ReferralBox extends Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            contractInstance: props.contractInstance,\n            account: props.account,\n            tokenDecimals: props.tokenDecimals,\n            referrals: null,\n            referral_list: \"\",\n            viewReferralReward: 0\n        }\n\n        this.referral_list = \"\"\n\n        this.withdrawReferralReward = this.withdrawReferralReward.bind(this)\n\n    }\n\n\n\n    componentDidMount(){\n        this.fetchReferral();\n        this.fetchTotalReward();\n\n        this.state.contractInstance.events.referralRewardSent().on('data', event => {\n            console.log(\"Referral Withdraw - Event Received\")\n\n            console.log(event)\n            this.fetchReferral();\n\n            this.forceUpdate();\n            let referral = event.returnValues.account;\n\n            console.log(referral)\n            console.log(this.state.account)\n            if(referral == this.state.account){\n                this.fetchReferral();\n            }\n\n        });\n\n    }\n\n    fetchReferral(){\n        \n        this.state.contractInstance.methods.getCurrentReferrals().call().then( (result) => {\n            console.log(\"Fetched Referrals\")\n            console.log(result)\n\n            if(result.length == 0){\n                result = null;\n            }\n\n            this.setState({referrals: result}, () => {\n                this.fetchTotalReward();\n            });\n        }).catch( (err) => {\n            console.log(\"Unable to list active stake; \" + err)\n        });       \n         \n    }\n\n\n    fetchTotalReward(){\n        this.state.contractInstance.methods.calculateTotalRewardReferral().call().then( (rawResult) => {\n\n            console.log(\"TotalReward:\" + rawResult)\n\n            let decimals = BigNumber(10).power(this.state.tokenDecimals);\n            let realAmount = BigNumber(rawResult).divide(decimals);\n\n            this.setState({\n                viewReferralReward: realAmount.toString()\n            })\n\n        }).catch( (err) => {\n            console.log(err)\n        });\n\n        if(this.state.referrals === null || this.state.referrals.length === 0){\n            console.log(\"No referrals present\")\n            return;\n        }\n\n        /*\n        this.state.contractInstance.methods.getLowestStake(this.state.referrals[0]).call().then( (rawResult) => {\n            console.log(\"Lowest stake:\")\n            console.log(rawResult)\n\n        }).catch( (err) => {\n            console.log(err)\n        });\n        */\n\n    }\n\n\n    fetchStakeReward(){\n        this.state.contractInstance.methods.calculateRewardReferral(this.state.referrals[0]).call().then( (rawResult) => {\n            console.log(rawResult)\n        }).catch( (err) => {\n            console.log(\"Unable to calculate\")\n        });\n    }\n\n\n    withdrawReferralReward(){\n        this.setState({\n            loading: true\n        })\n        this.state.contractInstance.methods.withdrawReferralReward().send({ from: this.state.account }).then( (rawResult) => {\n\n            console.log(rawResult)\n\n            let result = Boolean(rawResult)\n\n            if(result){\n                console.log(\"Reward successfully withdrawed\");\n            }else{\n                console.log(\"The POT is exhausted!!!!\")\n            }\n\n            this.fetchTotalReward();\n            this.fetchReferral();\n            this.setState({loading: false})\n        }).catch( (err) => {\n            console.log(\"There was an error : \" + err)\n            this.setState({loading: false})\n\n        });\n    }\n\n\n\n    render(){\n\n        return (\n            <Paper \n                elevation={4}\n                style={{ padding: 20, margin: 0, backgroundColor: '#fafafa' }}\n            >  \n                <Grid\n                    container\n                    spacing={1}\n                    direction=\"column\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                >\n                    <Grid item>\n                        <Typography variant=\"h4\" component=\"h4\">Referrals</Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography><Trans i18nKey=\"referral_panel.myReferralLabel\" />: <TextField value={this.state.account}></TextField></Typography>\n                    </Grid>\n                        {this.state.referrals !== null ? (\n                            <div>\n                                <Grid item>\n                                    {!this.state.loading ? (\n                                        this.referral_list = this.state.referrals.map( (ref_address) => \n                                        <ListItem button>\n                                            <ReferralEntry\n                                                contractInstance={this.state.contractInstance}\n                                                account={this.state.account}\n                                                tokenDecimals={this.state.tokenDecimals}\n                                                referredAddress={ref_address}\n                                            >\n                                            </ReferralEntry>\n                                        </ListItem>\n                                        )\n                                    ) : (\n                                        <CircularProgress />\n                                    )}\n                                    <List component=\"nav\">\n\n                                    </List>\n                                </Grid>\n                                <Grid item>\n                                    <Typography><Trans i18nKey=\"referral_panel.totalAvailavelReward\" />: <b>{this.state.viewReferralReward}</b></Typography>\n                                </Grid>\n                                <Grid item>\n                                    <Button \n                                        onClick={this.withdrawReferralReward}\n                                        variant=\"contained\" \n                                        color=\"primary\"\n                                        startIcon={<GetAppIcon />}\n                                    >\n                                        <Trans i18nKey=\"referral_panel.withdrawAll\" />\n                                    </Button>\n                                </Grid>\n                            </div>\n                        ): (\n                            <Grid item>\n                                <Typography color=\"error\"><ErrorOutlineIcon></ErrorOutlineIcon></Typography>\n                                <Typography color=\"error\"><Trans i18nKey=\"referral_panel.noReferral\" /></Typography>\n                            </Grid>\n                        )}\n\n                </Grid>\n            </Paper>\n        );\n\n    }\n\n\n}\n\n\nexport default ReferralBox;","import React, { Component } from \"react\";\n\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid'\n\nimport { Trans } from \"react-i18next\";\n\n\nimport getWeb3 from \"./utils/getWeb3\";\nimport BITNCrowdsale from \"./contracts/BITNCrowdsale\"\nimport { TextField } from \"@material-ui/core\";\n\nimport BigNumber from \"big-number\"\n\nimport PriceChart from './PriceChart'\n\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { withSnackbar } from 'notistack';\n\n\nconst styles = theme => ({\n    bar: {\n      color: 'orange',\n      colorDefault: 'black',\n      background : '#2E3B55'\n    },\n    buyButton: {\n        background: '#ff551f',\n        color: \"#efeded\",\n        border: \"1 px solid\",\n        borderColor: \"rgba(43, 43, 43, 0.5)\",\n        \"&:hover, &.Mui-focusVisible\": { \n            backgroundColor: \"#f77f5ae8\",\n            color: \"#000000\",\n            border: \"1 px solid\",\n            borderColor: \"rgba(43, 43, 43, 0.5)\",\n        }\n    },\n    checkBoxReferral: {\n        \"&:checked, &.Mui-checked\": {\n            color: \"#cf5d26\"\n        }\n    }\n  });\n\nclass CrowdsalePanel extends React.Component{\n\n    constructor (props){\n        super(props);\n\n        this.state = {\n            web3: props.web3,\n            tokenDecimals: props.tokenDecimals,\n            crowdsaleInstance: null,\n            availableBalance: 0,\n            currentRate: 0,\n            viewBITNAmount: 0,\n            amountOfBITN: 0,\n            amountOfETH: 0,\n            amountOfWEI: 0\n            \n        }\n\n\n        //this.crowdsaleAddress = \"0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb\"\n        //Mainnet\n        this.crowdsaleAddress = \"0x37Ff0201d4f574064d94844e46845BF8dDd1a9C6\"\n\n        this.handleBuy = this.handleBuy.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n\n    }\n\n\n\n    componentDidMount(){\n        this.loadCrowdsaleContract().then( () => {\n            this.getCurrentRate();\n            this.getAvailableBalance();\n        });\n    }\n\n\n    async loadCrowdsaleContract(){\n        const contract = require('truffle-contract')\n        const crowdsaleContract = contract(BITNCrowdsale)\n        crowdsaleContract.setProvider(this.state.web3.currentProvider)\n    \n        \n        await crowdsaleContract.at(this.crowdsaleAddress).then(instance => {\n            console.log(\"Crowdsale contract: \" + crowdsaleContract.address)\n\n            this.setState({\n                crowdsaleInstance: instance\n            });\n\n            this.getCurrentRate();\n\n        }).catch( (err) => {\n            console.log(\"There was an error: \" + err)\n        })\n    }\n\n\n    async getCurrentRate(){\n        this.state.crowdsaleInstance.getCurrentRate.call().then( (res) => {\n            console.log(res.toString())\n            this.setState({\n                currentRate: res.toString()\n            })\n        }).catch( (err) => {\n            console.log(\"Unable to fetch the current rate\")\n        })\n    }\n\n    async getAvailableBalance(){\n        this.state.crowdsaleInstance.getAvailableToken.call().then( (res) => {\n\n            let realAmount = this.state.web3.utils.fromWei(res)\n\n            this.setState({\n                availableBalance: realAmount.toString()\n            })\n\n        });\n    }\n\n\n\n    handleBuy(event){\n        event.preventDefault();\n\n        this.state.web3.eth.getAccounts().then( (account) => {\n\n            console.log(\"Accout beneficiary: \" + account[0])\n            console.log(this.state.web3.utils.toWei(this.state.amountOfWEI, \"wei\").toString())\n            this.state.crowdsaleInstance.buyTokens(account[0], {value: this.state.web3.utils.toWei(this.state.amountOfWEI, \"wei\"), from: account[0] }).then( (res) => {\n                this.props.enqueueSnackbar(<Trans i18nKey=\"crowdsale.snackbarSuccess\" />, {\n                    variant: 'success',\n                    anchorOrigin: {\n                        vertical: 'bottom',\n                        horizontal: 'left',\n                    },\n                });\n            }).catch( (err) => {\n                this.props.enqueueSnackbar(<Trans i18nKey=\"crowdsale.snackbarFailure\" />, {\n                    variant: 'error',\n                    anchorOrigin: {\n                        vertical: 'bottom',\n                        horizontal: 'left',\n                    },\n                });\n            })\n\n\n\n        })\n\n    }\n\n    \n    handleChange(event){\n        try{\n            let integerAmount = Number(event.target.value)\n            \n            if(integerAmount > this.state.availableBalance){\n                integerAmount = this.state.availableBalance;\n                this.props.enqueueSnackbar(<Trans i18nKey=\"crowdsale.liquidityLimitReached\" />, {\n                    variant: 'info',\n                    anchorOrigin: {\n                        vertical: 'bottom',\n                        horizontal: 'left',\n                    },\n                });\n            }\n\n            console.log(this.state.currentRate)\n            let currentRate = BigNumber(this.state.currentRate)\n\n            let decimals = BigNumber(10).pow(this.state.tokenDecimals)\n\n            let rawBITNAmount = BigNumber(integerAmount).multiply(decimals)\n            let BITNAmount = this.state.web3.utils.toBN(rawBITNAmount.toString())\n\n\n            let ethResult = rawBITNAmount.divide(currentRate)\n            let WEIAmount = this.state.web3.utils.toBN(ethResult.toString())\n\n            let ETHAmount = this.state.web3.utils.fromWei(WEIAmount);\n\n            this.setState({\n                viewBITNAmount: integerAmount,\n                amountOfBITN: BITNAmount,\n                amountOfWEI: WEIAmount,\n                amountOfETH: ETHAmount\n            })\n        }catch (err){\n            console.log(err)\n        }\n    }\n\n    render(){\n\n        const { classes } = this.props;\n\n\n        return(\n            <Paper \n                elevation={4}\n                style={{ padding: 20, margin: 0, backgroundColor: '#fafafa' }}\n            >  \n                <Grid\n                    container\n                    spacing={1}\n                    direction=\"column\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                >\n                    <Grid item>\n                        <Typography variant=\"h4\"><Trans i18nKey=\"crowdsale.title\" /></Typography>\n                    </Grid>\n                    <Grid item>\n                        {this.state.crowdsaleInstance !== null && (\n                            <PriceChart crowdsaleInstance={this.state.crowdsaleInstance} />\n                        )}\n                    </Grid>\n                    <Grid item>\n                        <Typography><Trans i18nKey=\"crowdsale.liquidity\" />: {this.state.availableBalance}</Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography><Trans i18nKey=\"crowdsale.currentRate\" />: <b>{this.state.currentRate}</b></Typography>\n                    </Grid>\n                    <Grid item>\n                        <TextField\n                            value={this.state.viewBITNAmount}\n                            label={<Trans i18nKey=\"crowdsale.amountBITN\" />}\n                            onChange={this.handleChange}\n                        ></TextField>\n                    </Grid>\n                    <Grid item>\n                        <TextField\n                            value={this.state.amountOfETH.toString()}\n                            label={<Trans i18nKey=\"crowdsale.amountETH\" />}\n                        ></TextField>                        \n                    </Grid>\n                    <Grid item>\n\n                    </Grid>\n                    <Grid item>\n                        <Button \n                            onClick={this.handleBuy} \n                            variant=\"outlined\"\n                            className={classes.buyButton}>\n                                <Trans i18nKey=\"crowdsale.buyButton\" />\n                        </Button>\n                    </Grid>\n\n                </Grid>\n            </Paper>\n        )\n    }\n\n\n}\n\nCrowdsalePanel.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\n\nexport default  withSnackbar(withStyles(styles)(CrowdsalePanel));","import React, { Component } from \"react\";\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport Grow from '@material-ui/core/Grow'\nimport Avatar from '@material-ui/core/Avatar'\nimport { Link } from '@material-ui/core';\n\nimport BigNumber from \"big-number\"\n\n\nimport { Trans } from \"react-i18next\";\n\n\nclass HomePage extends Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            web3: props.web3,\n            tokenInstance: props.tokenInstance,\n            tokenDecimals: props.tokenDecimals,\n            accounts: props.accounts,\n            tokenBalance: 0\n        }\n    }\n\n\n\n\n    componentDidMount(){\n        this.getTokenBalance();\n    }\n\n\n\n    async getTokenBalance(){\n        await this.state.tokenInstance.balanceOf(this.state.accounts[0]).then( (response) => {\n\n            let decimals = BigNumber(10).pow(this.state.tokenDecimals)\n\n            let viewBalance = BigNumber(response.toString()).divide(decimals)\n\n            this.setState({tokenBalance: viewBalance.toString()})\n\n        }).catch( (err) =>{\n            console.log(err);\n        });\n    }\n\n\n\n\n    render(){\n\n        return (\n            <Grow in={true}>\n                <Paper \n                    elevation={4}\n                    style={{ padding: 20, margin: 0, backgroundColor: '#fafafa' }}\n                    >\n                        <Typography variant=\"h4\" component=\"h4\"><Trans i18nKey=\"HomePage.title\" /></Typography>\n\n                        <Grid\n                            container\n                            spacing={1}\n                            direction=\"column\"\n                            justify=\"center\"\n                            alignItems=\"center\"\n                            >\n                                <Grid item>\n                                    <Typography variant=\"subtitle1\" gutterBottom><Trans i18nKey=\"HomePage.subtitle\" /></Typography>\n                                </Grid>\n                                <Grid item>\n                                    <Avatar alt=\"logo\" src=\"https://www.bitcoincompany.it/wp-content/uploads/2018/07/Logo-finale-trasparente.png\" style={{width: 200, height: 200}}/>\n                                </Grid>\n                                <Grid item>\n                                    <Typography><Trans i18nKey=\"HomePage.tokenBalance\" />: <b>{this.state.tokenBalance}</b></Typography>\n                                </Grid>\n                                <Grid item>\n                                    <Typography><Trans i18nKey=\"HomePage.stakeToken\" /></Typography>\n                                    <Button variant=\"outlined\" component={Link} to=\"/staking-form\"><Trans i18nKey=\"HomePage.goStaking\" /></Button>\n                                </Grid>\n                                <Grid item>\n                                    <Typography><Trans i18nKey=\"HomePage.needToken\" /></Typography>\n                                    <Button variant=\"outlined\" component={Link} to=\"/staking-form\"><Trans i18nKey=\"HomePage.goCrowdsale\" /></Button>\n                                </Grid>\n                        </Grid>\n                </Paper>\n            </Grow>\n        );\n    }\n\n}\n\nexport default HomePage;","import React, { Component } from \"react\";\n\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid'\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport LockIcon from '@material-ui/icons/Lock';\n\nimport PropTypes from 'prop-types';\n\n\nimport BigNumber from \"big-number\"\nimport { Trans } from \"react-i18next\";\n\n\nimport { withSnackbar } from 'notistack';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nimport StakingContract from \"./contracts/Staking.json\";\nimport BitcoinCompanyNetworkTestToken from \"./contracts/BitcoinCompanyNetworkTestToken.json\"\n\nimport ApproveTransfer from \"./ApproveTransfer\"\nimport TokenContext from './TokenContext'\n\n\nconst styles = theme => ({\n    bar: {\n      color: 'orange',\n      colorDefault: 'black',\n      background : '#2E3B55'\n    },\n    stakeButton: {\n        background: '#ff551f',\n        color: \"#efeded\",\n        border: \"1 px solid\",\n        borderColor: \"rgba(43, 43, 43, 0.5)\",\n        \"&:hover, &.Mui-focusVisible\": { \n            backgroundColor: \"#f77f5ae8\",\n            color: \"#000000\",\n            border: \"1 px solid\",\n            borderColor: \"rgba(43, 43, 43, 0.5)\",\n        }\n    },\n    checkBoxReferral: {\n        \"&:checked, &.Mui-checked\": {\n            color: \"#cf5d26\"\n        }\n    }\n  });\n  \n\nclass TestingBox extends Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            contractInstance: props.contractInstance,\n            accounts: props.accounts,\n            tokenInstance: props.tokenInstance,\n            tokenDecimals: props.tokenDecimals,\n            stakingAddress: props.stakingAddress,\n            tokenAddress: props.tokenAddress,\n            amountToStake: 0,\n            timeToLock: 0,\n            showReferralInput: false,\n            hasReferral: false,\n            referralAddress: \"\",\n            loading: false,                      //Display the loading icon during contract request,\n            approvementConfirmed: false\n        }\n\n\n        this.web3 = props.web3\n\n        this.handleAmountChange = this.handleAmountChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleReferralCheckbox = this.handleReferralCheckbox.bind(this)\n        this.handleReferralAddress = this.handleReferralAddress.bind(this)\n    }\n\n\n    componentDidMount(){\n        this.hasReferral();\n    }\n\n\n    handleAmountChange(event){\n        let _amountToStake = Number(event.target.value)\n\n        let decimals = BigNumber(10).pow(this.state.tokenDecimals)\n\n        let result = BigNumber(_amountToStake).multiply(decimals)\n\n        let finalAmount = this.web3.utils.toBN(result.toString())\n\n        this.setState({\n            amountToStake: _amountToStake,\n            finalAmount: finalAmount\n        })\n    }\n\n\n    handleReferralCheckbox(event){\n        if(event.target.checked === true)\n            this.setState({showReferralInput: true})\n        else\n            this.setState({showReferralInput: false})\n    }\n\n    handleReferralAddress(event){\n        this.setState({referralAddress: event.target.value})\n    }\n\n\n\n\n    handleSubmit(event){\n        event.preventDefault();\n\n        if(this.state.finalAmount === null){\n            console.log(\"Invalid amount\")\n        }\n\n        this.batchTransaction();\n   \n    }\n\n\n    async getApprove(){\n        \n        if(this.state.tokenInstance == null){\n            console.log(\"The contract is not instantiated yet\")\n            return;\n        }\n\n        console.log(\"Get Approve\")\n\n        this.setState({loading: true})\n\n        await this.state.tokenInstance.approve(this.state.stakingAddress, this.state.finalAmount.toString(), {from: this.state.account}).then( (response) => {\n            console.log(response);\n            if(response === true){\n                console.log(\"Approved the management of \" + this.state.approvedAmount + \" tokens\")\n            }else{\n                console.log(\"Has NOT the approvement\")\n            }\n            this.setState({approvementConfirmed: true})\n            return response;\n        }).catch( (err) =>{\n            console.log(err);\n            this.setState({loading: false})\n        });\n\n    }\n\n\n\n\n    async activateStake(){\n\n        var _referralAddress = \"0x0000000000000000000000000000000000000001\";\n\n        if(!this.state.hasReferral && this.state.showReferralInput)\n            _referralAddress = this.state.referralAddress\n\n        this.setState({loading: true})\n\n        this.state.contractInstance.methods.stakeToken(this.state.finalAmount.toString(), _referralAddress).send({ from: this.state.account }).then( (result) => {\n            console.log(\"Correctly staked \" + this.state.amountToStake + \" tokens\")\n            this.setState({\n                loading: false,\n                approvementConfirmed:false\n            })\n\n\n\n            this.props.enqueueSnackbar(\"Correctly staked \" + this.state.amountToStake + \" tokens\", {\n                variant: 'success',\n                anchorOrigin: {\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                },\n            });\n\n\n            this.hasReferral(); //Used to hide the Referral inputaddress\n\n        }).catch( (err) => {\n            console.log(\"Unable to stake; \" + err)\n            this.setState({loading: false})\n            this.props.enqueueSnackbar(\"Unable to stake\", {\n                variant: 'error',\n                anchorOrigin: {\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                },\n            });\n        });\n\n    }\n\n\n    async hasReferral(){\n        /*\n        this.state.contractInstance.methods.hasReferral().call().then( (result) => {\n            this.setState({\n                hasReferral: Boolean(result)\n            })\n        }).catch( (err) => {\n            console.log(\"Unable to fetch if the account has referral\")\n        });   \n        */     \n    }\n\n\n\n    async batchTransaction(){\n\n        console.log(this.state.tokenInstance.methods)\n\n\n        try{\n            var batch = new this.web3.eth.BatchRequest();\n\n            var tokenContract = new this.web3.eth.Contract(BitcoinCompanyNetworkTestToken.abi, this.state.tokenAddress)\n            tokenContract.options.from = this.state.account\n    \n            var stakingContract = new this.web3.eth.Contract(StakingContract.abi, this.state.stakingAddress)\n    \n            //batch.add(tokenContract.methods.approve(this.state.stakingAddress, this.state.finalAmount.toString()).send({ from: this.state.accounts[0] }));\n            //batch.add(this.state.tokenInstance.approve(this.state.stakingAddress, this.state.finalAmount.toString(),{ from: this.state.accounts[0] }));\n\n            batch.add(stakingContract.methods.stakeToken(this.state.finalAmount.toString(), \"0x0000000000000000000000000000000000000001\").send({ from: this.state.accounts[0] }));\n            batch.execute();\n        }catch(err){\n            console.log(err)\n        }\n\n    }\n\n\n\n\n    render(){\n\n        const { classes } = this.props;\n\n\n        let referral_input\n\n        if (this.state.showReferralInput === true){\n            referral_input = (\n                <Grid item>\n                    <TextField\n                                label={<Trans i18nKey=\"staking_form.referralPlaceholder\" />}\n                                margin=\"normal\"\n                                variant=\"outlined\" \n                                onChange={this.handleReferralAddress}\n                                value={this.state.referralAddress}                               \n                    /> \n                </Grid>\n            );\n        }\n\n\n        if(this.state.loading){\n            return(\n                <div>\n                    <CircularProgress />\n                    {this.state.approvementConfirmed && (\n                        <Typography>Approvement granted, waiting for the contract transaction...</Typography>\n                    )}\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <Grid\n                    container\n                    spacing={1}\n                    direction=\"column\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                >\n\n                    <Grid item>\n\n                        <TokenContext.Consumer>\n                                {context => (\n                                <ApproveTransfer \n                                    tokenAddress={context.address}\n                                    tokenName={context.name}\n                                    tokenSymbol={context.symbol}\n                                    decimals={context.decimals}\n                                    tokenInstance={context.instance}\n                                    accounts={this.state.accounts}\n                                    stakingAddress={this.state.stakingAddress}\n                                    web3={this.web3}>\n                                </ApproveTransfer>\n                                )}\n                        </TokenContext.Consumer>\n\n                    </Grid>\n\n                    <Grid item>\n                        <TextField\n                                label={<Trans i18nKey=\"staking_form.textBoxHelper\" />}\n                                margin=\"normal\"\n                                variant=\"outlined\" \n                                onChange={this.handleAmountChange}\n                                value={this.state.amountToStake}  \n                                autoFocus \n                        />\n                    </Grid>\n\n                    <Grid item>\n\n                    </Grid>\n                    {!this.state.hasReferral && ( \n                    <Grid item>\n                        <Grid \n                            container\n                            direction=\"row\"\n                            justify=\"center\"\n                            alignItems=\"center\"\n                            >\n                            <Grid item>\n                                <Typography variant=\"body1\" component=\"p\"><Trans i18nKey=\"staking_form.referralCheckbox\" /></Typography>\n                            </Grid>\n                            <Grid item>\n                                <Checkbox\n                                    checked={this.state.showReferralInput}\n                                    onChange={this.handleReferralCheckbox}\n                                    checked={this.state.showReferralInput}\n                                    inputProps={{\n                                    'aria-label': 'primary checkbox',\n                                    }}\n                                    className={classes.checkBoxReferral}\n                                />\n                            </Grid>\n                        </Grid>\n\n                        {referral_input}\n                    </Grid>\n                    )}\n                    <Grid item>\n                        <Button \n                            variant=\"contained\" \n                            color=\"secondary\" \n                            onClick={this.handleSubmit}\n                            startIcon={<LockIcon />}\n                            className={classes.stakeButton}                            \n\n                            >\n                                Stake\n                            </Button>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n\n    }\n\n\n}\n\n\n\nTestingBox.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\n\nexport default withSnackbar( withStyles(styles)(TestingBox));","import React, { Component } from \"react\";\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid'\n\n\nimport BigNumber from \"big-number\"\n\n\nclass AccountStatus extends Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            web3: props.web3,\n            tokenInstance: props.tokenInstance,\n            tokenDecimals: props.tokenDecimals,\n            accounts: props.accounts,\n            tokenBalance: 0\n        }\n    }\n\n\n\n\n    componentDidMount(){\n        this.getTokenBalance();\n    }\n\n\n\n    async getTokenBalance(){\n        await this.state.tokenInstance.balanceOf(this.state.accounts[0]).then( (response) => {\n            console.log(response);\n\n            let decimals = BigNumber(10).pow(this.state.tokenDecimals)\n\n            let viewBalance = BigNumber(response.toString()).divide(decimals)\n\n            this.setState({tokenBalance: viewBalance.toString()})\n\n        }).catch( (err) =>{\n            console.log(err);\n        });\n    }\n\n\n\n    render(){\n\n        return (\n            <Grid container>\n                <Grid item>\n                    <Typography>Token Balance: <b>{this.state.tokenBalance}</b></Typography>\n                </Grid>\n            </Grid>\n        );\n    }\n\n}\n\nexport default AccountStatus;","import React, { Component } from \"react\";\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\n\n\n\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\n\n\nconst styles = theme => ({\n    bar: {\n      color: 'orange',\n      colorDefault: 'black',\n      background : '#2E3B55'\n    },\n    logo: {\n        margin: 10,\n    },\n    languageButton: {\n        background: '#50646e',\n        \"&:hover, &.Mui-focusVisible\": { \n            backgroundColor: \"#927b7ba6\",\n            color: \"#000000\",\n            border: \"1 px solid\",\n            borderColor: \"rgba(43, 43, 43, 0.5)\",\n        }\n    }\n  });\n  \n\nclass MainBar extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            isEnglish: true,\n            language: 'en'\n        }\n\n        this.changeLanguageCallback = this.props.changeLanguageCallback;\n        this.handleEnglish = this.handleEnglish.bind(this)\n        this.handleItalian = this.handleItalian.bind(this)\n\n    }\n\n\n    handleEnglish(event){\n        this.setState({\n            isEnglish: true,\n            language: 'en'\n        })\n        this.changeLanguageCallback('en')\n\n    }\n    handleItalian(event){\n        this.setState({\n            isEnglish: false,\n            language: 'it'\n        })\n        this.changeLanguageCallback('it')\n    }\n\n    render(){\n\n        const { classes } = this.props;\n\n\n        return(\n            <AppBar position=\"static\" className={classes.bar}>\n                <Toolbar>\n                <IconButton \n                    edge=\"start\"  \n                    color=\"inherit\" \n                    aria-label=\"menu\" \n                    onClick={this.props.openMenuCallback('', true)}\n                    >\n                    <MenuIcon />\n                </IconButton>\n                <Avatar alt=\"logo\" src=\"https://www.bitcoincompany.it/wp-content/uploads/2019/08/BITN-Token-RGB-256x256.png\" className={classes.logo} />\n                <Typography variant=\"h6\" >\n                    <b>BITN Staking Machine</b>\n                </Typography>\n                {this.state.isEnglish ? (\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        className={classes.languageButton}\n                        onClick={this.handleItalian}\n                        style={{\n                            marginLeft: \"auto\",\n                            marginRight: -12\n                        }}\n                        >\n                        ITA\n                    </Button>\n                ) : (\n                    <Button\n                        variant=\"contained\"\n                        color=\"secondary\"\n                        className={classes.languageButton}\n                        onClick={this.handleEnglish}\n                        style={{\n                            marginLeft: \"auto\",\n                            marginRight: -12\n                        }}\n                        >\n                        ENG\n                    </Button>                   \n                )}\n                </Toolbar>\n            </AppBar>\n        );\n    }\n\n}\n\nMainBar.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\n\n\n\nexport default withStyles(styles)(MainBar);\n\n","import React, { Component } from \"react\";\n\n\nimport Typography from '@material-ui/core/Typography';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid'\nimport PieChart from 'react-minimal-pie-chart';\n\n\nimport BigNumber from 'big-number'\n\nimport { Trans } from \"react-i18next\";\n\nclass MachineState extends Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            contractInterface: props.contractInterface,\n            tokenDecimals: props.tokenDecimals,\n            machineState: 0,\n            statePercentpercentState: 0,\n            loading: false\n        }\n    }\n\n    componentDidMount(){\n        this.getMachineState();\n    }\n\n\n    async getMachineState(){\n        this.setState({loading: true});\n\n        await this.state.contractInterface.methods.getMachineState().call().then( (rawResult) => {\n\n            let decimals = BigNumber(10).power(this.state.tokenDecimals);\n            let maxSupply = BigNumber(50000000);\n\n            let normalAmount = BigNumber(rawResult).divide(decimals)\n            let realAmount = normalAmount.toString();\n\n            let statePercent = normalAmount.multiply(100).div(maxSupply)\n            console.log(statePercent.toString())\n\n            console.log(\"Machine state : \" + realAmount);\n            this.setState({\n                machineState: realAmount,\n                statePercent: statePercent.toString(),\n                loading: false\n            });\n\n        }).catch( (err) => {\n            console.log(err);\n            this.setState({loading: false})\n        });  \n    \n    }\n\n\n\n    render(){\n\n        return(\n            <div>\n                {this.state.loading ? (\n                    <div>\n                        <Typography><Trans i18nKey=\"sideMenu.loadingMachineState\" />...</Typography>\n                        <CircularProgress />\n                    </div>\n                ) : (\n                        <Grid \n                            contaier\n                            direction=\"column\"\n                            justify=\"space-around\"\n                            alignItems=\"stretch\">\n                            <Grid item>\n                                <Typography><Trans i18nKey=\"sideMenu.machineState\" />: {this.state.machineState}</Typography>\n                            </Grid>\n                            <Grid item>\n                                <Grid\n                                    container\n                                    direction=\"column\"\n                                    spacing={2}\n                                    alignItems=\"center\"\n                                >\n                                    <Grid item>\n                                        <Typography>{this.state.statePercent}% <Trans i18nKey=\"sideMenu.machineAvailableAmount\" /></Typography>         \n                                    </Grid>\n                                    <Grid item>\n                                        <PieChart\n                                            style={{width: \"6em\"}}\n                                            data={[\n                                                { title: 'Available', value: Number(this.state.statePercent), color: '#E38627' },\n                                                { title: 'Supplied', value: 100-Number(this.state.statePercent), color: '#A28127' },\n                                            ]}\n                                            />\n                                    </Grid>\n                                </Grid>\n\n                       \n                            </Grid>\n                        </Grid>\n                )}\n            </div>\n        )\n    }\n\n\n\n\n}\n\n\nexport default MachineState;\n","import React, { Component } from \"react\";\n\nimport StakingPanel from \"./StakingPanel\"\nimport ReferralBox from \"./ReferralBox\"\nimport TokenContext from './TokenContext'\nimport StakingLister from './StakingLister'\nimport CrowdsalePanel from './CrowdsalePanel'\nimport HomePage from './HomePage'\nimport TestingBox from './TestingBox'\nimport AccountStatus from \"./AccountStatus\"\n\nimport MainBar from \"./MainBar\"\nimport MachineState from './MachineState'\nimport ApproveTransfer from './ApproveTransfer'\n\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\n\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid'\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport Avatar from '@material-ui/core/Avatar'\n\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\nimport CardGiftcardIcon from '@material-ui/icons/CardGiftcard';\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport HomeIcon from '@material-ui/icons/Home';\n\nimport { Trans } from \"react-i18next\";\n\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n  } from \"react-router-dom\";\n\n\nconst styles = theme => ({\n    appBackgroud: {\n        background: 'linear-gradient(45deg, #8c8281 10%, #ebd7d5 90%)',\n        borderRadius: 3,\n        border: 0,\n        color: 'white',\n        //height: 48,\n        padding: '0 30px',\n        boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    },\n  });\n\n/**\n * @brief Component responsible of managing the contract User's feature\n * \n * Interface for the contract's user feature, like depositing in the pot.\n * \n * It should be displayed only if the fetched account is the user of the contract\n */\nclass UserBox extends Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            web3: props.web3,\n            stakingInstance: props.contractInstance,\n            accounts: props.accounts,\n            tokenAddress: null, \n            stakingAddress: props.stakingAddress,\n            menuOpened: false,\n        }\n        \n        this.toggleDrawer = this.toggleDrawer.bind(this)\n\n    }\n\n\n\n    \n\n    toggleDrawer = (view, open) => event => {\n            if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n                return;\n              }\n\n              this.setView(view, open)\n    }\n\n\n\n\n    componentDidMount(){\n        this.getTokenAddress();\n    }\n\n\n    setView(view, open){\n        let _view\n\n        if(view === null){\n            _view = this.state.currentView\n        }else{\n            _view = view\n        }\n        \n\n        this.setState({ \n            menuOpened: open,\n            currentView: _view\n        });\n    }\n\n    async getTokenAddress() {\n        console.log(\"Asking for token address\")\n        const response = await this.state.stakingInstance.methods.getTokenAddress().call();\n        console.log(\"Fetched token address: \" + response);\n        this.setState({tokenAddress: response});\n        return response;\n    };\n\n\n\n       \n\n\n\n    render(){\n\n        const { classes } = this.props;\n\n\n        return(\n            <div>\n                <MainBar\n                    openMenuCallback={this.toggleDrawer}\n                    changeLanguageCallback={this.props.changeLanguageCallback}\n                ></MainBar>\n                <Container maxWidth=\"md\" style={{padding: 6}}>\n                    <SwipeableDrawer\n                        open={this.state.menuOpened}\n                        onClose={this.toggleDrawer('', false)}\n                        onOpen={this.toggleDrawer('', true)}\n                    >\n                        <List>\n                            <ListItem >\n                                <Avatar alt=\"logo\" src=\"https://www.bitcoincompany.it/wp-content/uploads/2019/08/BITN-Token-RGB-256x256.png\" style={{margin:10}} />\n                                <ListItemText primary={\"Staking Machine\"} />\n                            </ListItem>\n                            <ListItem button component={Link} to=\"/\" onClick={this.toggleDrawer('', false)}>\n                                <ListItemIcon><HomeIcon /></ListItemIcon>\n                                <ListItemText primary={\"Home\"} />\n                            </ListItem>\n                            <ListItem button component={Link} to=\"/staking-form\" onClick={this.toggleDrawer('', false)}>\n                                <ListItemIcon><HowToVoteIcon /></ListItemIcon>\n                                <ListItemText primary={<Trans i18nKey=\"sideMenu.stakingForm\" />} />\n                            </ListItem>\n                            <ListItem button component={Link} to=\"/stake-list\" onClick={this.toggleDrawer('', false)}>\n                                <ListItemIcon><FormatListBulletedIcon /></ListItemIcon>\n                                <ListItemText primary={<Trans i18nKey=\"sideMenu.stakeList\" />} />\n                            </ListItem>\n                            <ListItem button component={Link} to=\"/referrals\" onClick={this.toggleDrawer('', false)}>\n                                <ListItemIcon><CardGiftcardIcon /></ListItemIcon>\n                                <ListItemText primary={<Trans i18nKey=\"sideMenu.referrals\" />} />\n                            </ListItem>\n                            <Divider />\n                            <ListItem button component={Link} to=\"/crowdsale\" onClick={this.toggleDrawer('', false)}>\n                                <ListItemIcon><ShoppingCartIcon /></ListItemIcon>\n                                <ListItemText primary={\"Crowdsale\"} />\n                            </ListItem>\n                            <Divider />\n                            <ListItem>\n                                <TokenContext.Consumer>\n                                    {context => (\n                                        <MachineState\n                                            contractInterface={this.state.stakingInstance}\n                                            tokenDecimals={context.decimals}\n                                        />\n                                    )}\n                                    </TokenContext.Consumer>\n                            </ListItem>\n                            <Divider />\n                            <ListItem>\n                            <TokenContext.Consumer>\n                                    {context => (\n                                        <AccountStatus\n                                            web3={this.state.web3}\n                                            tokenInstance={context.instance}\n                                            tokenDecimals={context.decimals}\n                                            accounts={this.state.accounts}\n                                        />\n                                    )}\n                                    </TokenContext.Consumer>\n                            </ListItem>\n                            <Divider />\n                            <ListItem button onClick={this.toggleDrawer(null, false)}>\n                                <ListItemIcon><InboxIcon /></ListItemIcon>\n                                <ListItemText primary={\"Close\"} />\n                            </ListItem>\n                        </List>\n                    </SwipeableDrawer>\n                    {this.state.tokenAddress !== null ? (\n                        <Grid\n                        container\n                        spacing={5}\n                        direction=\"column\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                        >\n\n                            <Switch>\n                                <Route path=\"/staking-form\">\n                                    <TokenContext.Consumer>\n                                        {context => (\n                                            <div>\n                                                <Grid item>\n                                                    <ApproveTransfer \n                                                        tokenAddress={context.address}\n                                                        tokenName={context.name}\n                                                        tokenSymbol={context.symbol}\n                                                        decimals={context.decimals}\n                                                        tokenInstance={context.instance}\n                                                        accounts={this.state.accounts}\n                                                        stakingAddress={this.state.stakingAddress}\n                                                        web3={this.state.web3}>\n                                                    </ApproveTransfer>\n                                                </Grid>\n                                                <Grid item>\n                                                    <StakingPanel\n                                                        contractInterface={this.state.stakingInstance} \n                                                        accounts={this.state.accounts}\n                                                        \n\n                                                        stakingAddress={this.state.stakingAddress}\n                                                        web3={this.state.web3}\n                                                        >\n                                                    </StakingPanel>\n                                                </Grid>\n                                            </div>\n                                        )}\n                                    </TokenContext.Consumer>\n                                </Route>\n                                <Route path=\"/testing\">\n                                    <TokenContext.Consumer>\n                                        {context => (\n                                            <Grid item>\n\n                                            <TestingBox\n                                                contractInterface={this.state.stakingInstance} \n                                                accounts={this.state.accounts}\n                                                tokenAddress={context.address}\n                                                tokenDecimals={context.decimals}\n                                                tokenInstance={context.instance}\n\n                                                stakingAddress={this.state.stakingAddress}\n                                                web3={this.state.web3}\n                                                >\n                                            </TestingBox>\n\n                                            </Grid>\n                                        )}\n                                    </TokenContext.Consumer>\n                                </Route>\n                                <Route path=\"/referrals\">\n                                    <TokenContext.Consumer>\n                                        {context => (\n                                           <Grid item>\n\n                                            <ReferralBox \n                                                contractInstance={this.state.stakingInstance} \n                                                account={this.state.accounts[0]}\n                                                tokenDecimals={context.decimals}>\n                                            </ReferralBox>\n                                           </Grid>\n                                        )}\n                                    </TokenContext.Consumer>\n                                </Route>\n                                <Route path=\"/stake-list\">\n                                    <TokenContext.Consumer>\n                                    {context => (\n                                        <Grid item>\n                                        <StakingLister \n                                            contractInstance={this.state.stakingInstance} \n                                            accounts={this.state.accounts}\n                                            tokenDecimals={context.decimals}>\n                                        </StakingLister>\n                                        </Grid>\n                                    )}\n                                    </TokenContext.Consumer>\n                                </Route>\n                                <Route path=\"/crowdsale\">\n                                    <TokenContext.Consumer>\n                                    {context => (\n                                        <Grid item>\n                                        <CrowdsalePanel\n                                            web3={this.state.web3}\n                                            tokenDecimals={context.decimals}\n                                        ></CrowdsalePanel>\n                                        </Grid>\n                                    )}\n                                    </TokenContext.Consumer>\n                                </Route>\n                                <Route path=\"/\">\n                                    <TokenContext.Consumer>\n                                        {context => (\n                                            <Grid item>\n                                            <HomePage\n                                                web3={this.state.web3}\n                                                tokenInstance={context.instance}\n                                                tokenDecimals={context.decimals}\n                                                accounts={this.state.accounts}\n\n                                            />\n                                            </Grid>\n                                        )}\n                                    </TokenContext.Consumer>\n                                </Route>\n                            </Switch>\n                        </Grid>\n                ) : (\n                    <p>Loading token contract...</p>\n                )}\n                </Container>\n            </div>\n        );\n    }\n\n\n\n\n}\n\n\n\nUserBox.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\n\nexport default withStyles(styles)(UserBox);","import React, { Component } from \"react\";\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid'\n\n\nclass Web3ErrorPage extends Component {\n\n    constructor(props){\n\n    }\n\n\n    render(){\n\n        return (\n            <Grid container>\n                <Grid item>\n                    <Typography>Your browser currently not support this Dapp</Typography>\n                </Grid>\n                <Grid item>\n                    <Typography>Desktop Browser: Parity, Mist, Brave</Typography>\n                </Grid>\n                <Grid item>\n                    <Typography>Android Browser: Metamask, imToken, Trust Wallet</Typography>\n                </Grid>\n                <Grid item>\n                    <Typography>iOS Browser: imToken, Metamask</Typography>\n                </Grid>\n            </Grid>\n        );\n    }\n\n}\n\nexport default Web3ErrorPage;","import React, { Component } from \"react\";\nimport StakingContract from \"./contracts/Staking.json\";\nimport BitcoinCompanyNetworkTestToken from \"./contracts/BitcoinCompanyNetworkTestToken.json\"\n\nimport getWeb3 from \"./utils/getWeb3\";\n\nimport \"./App.css\";\n\nimport OwnerPanel from \"./OwnerPanel\"\nimport UserBox from \"./UserBox\"\nimport TokenContext from './TokenContext'\nimport TokenSetup from \"./TokenSetup\"\nimport Web3ErrorPage from \"./Web3ErrorPage\"\n\nimport 'typeface-roboto';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Avatar from '@material-ui/core/Avatar'\nimport Grid from '@material-ui/core/Grid'\n\nimport Box from '@material-ui/core/Box';\n\n\nimport { translate, Trans } from \"react-i18next\";\n\n\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\n\nconst styles = theme => ({\n  appBackgroud: {\n      background: 'linear-gradient(#8c8281 30%, #FFFFFF)',\n      borderRadius: 3,\n      border: 0,\n      color: 'white',\n  },\n});\n\n\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = { \n      web3: null,   //TODO Remove web3 from the state\n      accounts: null, \n      StakingInstance: null, \n      StakingAddress: null,\n      isOwner: false,\n      approved: false,\n      isTokenSet: false,\n      tokenAddress: null, \n      tokenInstance: null ,\n      tokenDecimals: null,\n      tokenName: null,\n      tokenSymbol: null,\n      tokenLoaded: false,\n      error: false,\n      menuOpened: false,\n      menuCallback: null,\n      language: 'en',\n      callbackLanguage: this.props.i18n.changeLanguage,\n      web3Unavailable: false    //Used when a browser that does not support web3 is detected\n    };\n\n\n\n\n    //this.stakingAddress = \"0xC89Ce4735882C9F0f0FE26686c53074E09B0D550\"\n    //Mainnet\n    this.stakingAddress = \"0xff0a847CAeB76d923a5f1A9c4efaB2BEB5eD7323\"\n\n\n    this.openMenuCallback = this.openMenuCallback.bind(this)\n    this.languageChanged = this.languageChanged.bind(this)\n\n  }\n\n\n\n\n  componentDidMount = async () => {\n\n    try {\n      // Get network provider and web3 instance.\n      const _web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const _accounts = await _web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await _web3.eth.net.getId();\n      const deployedNetwork = StakingContract.networks[networkId];\n\n      if(deployedNetwork === null){\n        alert(\"Unable to detect the staking contract\")\n      }\n\n\n      _web3.eth.defaultAccount = _accounts[0];\n      //console.log(\"Staking Address: \" + deployedNetwork.address)\n\n      const instance = new _web3.eth.Contract(\n        StakingContract.abi,\n        this.stakingAddress,\n      );\n\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({\n         web3: _web3, \n         accounts: _accounts, \n         StakingInstance: instance, \n         StakingAddress: this.stakingAddress,\n        }, () => {\n          this.handleContractRole();\n\n          this.checkToken().then( () => {\n            if(this.state.isTokenSet === true){\n              console.log(\"The token is setted, fetching the address...\")\n\n              this.getTokenAddress().then( (res) => {\n\n                if(this.state.tokenAddress !== null){\n                  console.log(\"Fetching the token info\")\n                  this.loadTokenInfo().then( () => {\n                  });\n                }\n              });\n            }\n          })\n      });\n    \n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      alert(error)\n      console.error(error);\n    }\n  };\n\n\n  handleContractRole = async() => {\n    console.log(\"Checking which role has the client wallet...\")\n\n    this.state.StakingInstance.methods.isOwner().call().then( (response) => {\n      \n      if( response === true){\n        console.log(\"The current account is the owner of the contract\")\n        this.setState({ isOwner: true })\n      }else{\n        console.log(\"The current account is NOT the owner of the contract\")\n        this.setState({ isOwner: false })        \n      }\n\n    });\n\n\n  }\n\n\n\n  checkToken = async () => {\n    console.log(\"Checking if the token address is already setted...\")\n    // Get the value from the contract to prove it worked.\n    await this.state.StakingInstance.methods.isTokenSet().call().then( (response) => {\n      console.log(\"Response: \" + response)\n      if(response === true){\n        this.setState({\n          isTokenSet: true\n        });\n        return true;\n      }else{\n        this.setState({\n          isTokenSet: false\n        });        \n        return false;\n      }\n    }).catch( (error) => {\n      console.log(\"Unable to check if the token is set\")\n      return false;\n    });\n  };\n\n\n  getTokenAddress = async () => {\n    const address = await this.state.StakingInstance.methods.getTokenAddress().call();\n    console.log(\"Fetched token address: \" + address);\n    \n    \n    if(typeof address === 'undefined'){\n      console.log(\"Unable to load the correct address\")\n      this.setState({error: true});\n      return false;\n    }\n\n\n    this.setState({tokenAddress: address});\n    return true;\n\n  };\n\n  loadTokenInfo = async () => {\n\n    //TODO Create a web3 instance from the token Address and call ERC20 functions\n    //Then save it into the context\n\n    const contract = require('truffle-contract')\n    const tokenContract = contract(BitcoinCompanyNetworkTestToken)\n    tokenContract.setProvider(this.state.web3.currentProvider)\n\n    \n    await tokenContract.at(this.state.tokenAddress) //Address of the contract, obtained from Etherscan\n    .then(instance => {\n      var tokenContractInstance = instance\n      this.setState({tokenInstance: tokenContractInstance}, async () =>{ \n\n        this.state.tokenInstance.decimals.call().then( (res) => {\n          console.log(\"Token Decimals : \" + res)\n          this.setState({tokenDecimals: Number(res)}, () => {\n\n\n            this.state.tokenInstance.name.call().then( (name) => {\n              console.log(\"Token Name : \" + name)\n              this.setState({tokenName:name}, () => {\n\n                this.state.tokenInstance.symbol.call().then( (symbol) => {\n                  console.log(\"Token Symbol : \" + symbol)\n                  this.setState({tokenSymbol: symbol}, () => {\n\n                    this.isTokenLoaded()\n                  });\n                })\n\n\n              });\n            })\n\n          });\n        })\n\n\n\n\n\n      });\n      console.log(\"Token Contract - Contract Instantiated from \" + this.state.tokenAddress);\n\n    }).catch( (err) => {\n      console.log(\"Unable ot load the Token Address Contract\")\n    })\n\n\n  }\n\n\n  isTokenLoaded(){\n    if(\n        this.state.tokenDecimals !== null &&\n        this.state.tokenName !== null &&\n        this.state.tokenSymbol !== null &&\n        this.state.tokenInstance !== null\n      ){\n        console.log(\"Token Loaded\")\n        this.setState({tokenLoaded: true})\n      }\n  }\n\n\n  openMenuCallback(){\n    this.setState({menuOpened: true})\n  }\n\n\n  languageChanged(_language){\n    this.setState({\n      language: _language\n    })\n    this.props.i18n.changeLanguage(_language)\n  }\n\n\n  render() {\n\n    const { classes } = this.props;\n\n\n\n    //Handle browser that does not support web3\n    if(this.state.web3Unavailable){\n      return(\n        <Web3ErrorPage />\n      );\n    }\n\n\n\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    let body;\n\n\n    if(this.state.isOwner){\n\n      if(this.state.isTokenSet && this.state.tokenLoaded){\n        body = (\n          <div>\n            <Typography variant=\"h4\" component=\"h2\" gutterBottom>Owner Panel</Typography>\n                       \n            <TokenContext.Provider\n                    value={{\n                      accounts: this.state.accounts,\n                      address: this.state.tokenAddress,\n                      instance: this.state.tokenInstance,\n                      decimals: this.state.tokenDecimals,\n                      name: this.state.tokenName,\n                      symbol: this.state.tokenSymbol,\n                      stakingInstance: this.state.StakingInstance,\n                      stakingAddress: this.state.StakingAddress,\n                      web3: this.state.web3\n                    }}\n              >\n                <OwnerPanel \n                  accounts={this.state.accounts} \n                  stakingInstance={this.state.StakingInstance}\n                  stakingAddress={this.state.StakingAddress}\n                  web3={this.state.web3}>\n                </OwnerPanel>\n            </TokenContext.Provider>\n          </div>\n        );\n      }else{\n        body = (\n          <TokenSetup \n            stakingInstance={this.state.StakingInstance} \n            account={this.state.accounts[0]}\n            callbackSetted={this.checkToken}>\n          </TokenSetup>\n        )\n      }\n\n    }else{\n\n      if(this.state.tokenLoaded && this.state.tokenLoaded){\n\n        body = (\n          <Router>\n            <TokenContext.Provider\n              value={{\n                web3: this.state.web3,\n                accounts: this.state.accounts,\n                address: this.state.tokenAddress,\n                instance: this.state.tokenInstance,\n                decimals: this.state.tokenDecimals,\n                name: this.state.tokenName,\n                symbol: this.state.tokenSymbol,\n                stakingInstance: this.state.StakingInstance,\n                stakingAddress: this.state.StakingAddress,\n              }}\n            >\n                <UserBox \n                  accounts={this.state.accounts} \n                  contractInstance={this.state.StakingInstance}\n                  stakingAddress={this.state.StakingAddress}\n                  tokenAddress={this.state.tokenAddress}\n                  web3={this.state.web3}\n                  changeLanguageCallback={this.languageChanged}\n                  >\n                </UserBox>\n            </TokenContext.Provider>\n          </Router>\n        );\n      }else{\n        body = (\n          <div>\n            <Container maxWidth=\"sm\">\n              <Grid container\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item>\n                  <Typography variant=\"h4\" component=\"h2\" gutterBottom>BITN Staking Machine</Typography>\n                </Grid>\n                <Grid item>\n                  <Avatar alt=\"logo\" src=\"https://www.bitcoincompany.it/wp-content/uploads/2018/07/Logo-finale-trasparente.png\" style={{width: 200, height: 200}}/>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"subtitle1\" component=\"p\" color=\"textSecondary\" gutterBottom> Loading user panel...</Typography>\n                  <CircularProgress></CircularProgress>\n                </Grid>\n              </Grid>\n            </Container>\n\n          </div>\n        );        \n      }\n\n\n\n    }\n\n\n\n\n\n    return (\n      <div className=\"App\">\n        <Box className={classes.appBackgroud}>\n          {body}\n        </Box>\n      </div>\n    );\n  }\n}\n\n\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\n\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import i18n from \"i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\n\ni18n.use(LanguageDetector).init({\n  // we init with resources\n  resources: {\n    en: {\n      translations: {\n        Title: \"BITN Staking Machine  \",\n        staking_form: {\n          title: \"Staking Form\",\n          subtitle: \"In this section you could stake your BITN token.\",\n          referralCheckbox: \"Have a referral?\",\n          textBoxHelper: \"Amount to stake\",\n          helpButton: \"Help needed?\",\n          referralPlaceholder: \"Referral Address\",\n          errorUndefinedStake: \"Set the amount to stake first\",\n          errorInsufficientFunds: \"Insufficient funds\",\n          errorNoAllowance: \"Set the allowance first\",\n          unableToStake: \"Unable to stake\",\n          correctStake: \"Successful stake\"\n\n        },\n        sideMenu: {\n          stakingForm: \"Staking Form\",\n          stakeList: \"Stake List\",\n          referrals: \"Referrals Panel\",\n          machineState: \"Machine State\",\n          machineAvailableAmount: \" of token still available\",\n          loadingMachineState: \"Loading machine state\"\n\n        },\n        staking_list: {\n          title: \"Staking List\",\n          noStakePresent: \"No stake present\",\n          showArchived: \"Show Archived\"\n        },\n        account_info: {\n          totalAmount: \"Total stake amount\",\n          numberOfActiveStake: \"Number of active stake\",\n          noReferralPresent: \"Referral\"\n        },\n        referral_panel: {\n          myReferralLabel: \"Your referral address is\",\n          availableReward: \"Available Reward\",\n          totalAvailavelReward: \"Total Reward available\",\n          withdrawAll: \"Withdraw All\",\n          noReferral: \"No referral found\"\n        },\n        stake_detail: {\n          previewText: \"Amount staked\",\n          amountStaked: \"Amount staked\",\n          periodElasped: \"Period elasped\",\n          penalty: \"Withdraw penalty\",\n          gain: \"Gain\",\n          withdrawed: \"Withdrawed\",\n          creationTime: \"Creation Time\",\n          availableRewards: \"Available reward\",\n          withdrawReward: \"Withdraw Rewards\",\n          withdraw: \"Withdraw\"\n        },\n        withdrawBox: {\n          withdrawLabel: \"Instead if you want to withdraw and terminate you stake, click the button below\",\n          tokenSuccesWithdrawMsg: \"Token successfullu withdrawed\",\n          tokenFailedWithdrawMsg: \"Unable to withdraw tokens\",\n        },\n        help: {\n          p1: \"Smart contract manages ERC20 tokens differently compared to Ether. In fact if some ERC20 token is sent to the contract, it is not able to understand where these token comes from.\",\n          p2: \"For this reason, you have to set the approvement before each deposit on this app using the related panel\",\n          p3: \"\",\n          linkText: \"More Info\",\n          link: \"https://tokenallowance.io/index.html\"\n        },\n        crowdsale: {\n          title: \"Crowdsale Panel\",\n          liquidity: \"Total Liquidity\", \n          currentRate: \"Current exchange rate\",\n          amountBITN: \"Amounf of BITN\",\n          amountETH: \"Amount of ETH\",\n          buyButton: \"Buy\",\n          snackbarSuccess: \"Successful purchase\",\n          snackbarFailure: \"Error on purchase\",\n          liquidityLimitReached: \"Liquidity limit reached\"\n        },\n        approvementPanel: {\n          title: \"Approvement\",\n          approvementStatus: \"Already has the approvement to manage\",\n          editExternalButton: \"Edit the Amount\",\n          textLabel: \"Amount to approve\",\n          editInternalButton: \"Edit the amount to approve\",\n          closeButton: \"Close\"\n        },\n        HomePage: {\n          title: \"Welcome\",\n          subtitle: \"Start using your the BITN staking machine now\",\n          tokenBalance: \"Token balance\",\n          stakeToken: \"Stake your token now!!\",\n          goStaking: \"Go to the staking page\",\n          needToken: \"Need some token?\",\n          goCrowdsale: \"Go to the crowdsale page\"\n        }\n      }\n    },\n    it: {\n        translations: {\n          Title: \"BITN Macchina da Staking\",\n          staking_form: {\n            title: \"Modulo Staking\",\n            subtitle: \"In questa sezione potrai fare stake dei tuoi BITN token.\",\n            referralCheckbox: \"Hai un referral?\",\n            textBoxHelper: \"Importo di stake\",\n            helpButton: \"Serve aiuto?\",\n            referralPlaceholder: \"Indirizzo referral\",\n            errorUndefinedStake: \"Inserisci il numero di token\",\n            errorInsufficientFunds: \"Fondi insufficienti\",\n            errorNoAllowance: \"Approvazione non abilitata\",\n            unableToStake: \"Impossibile effettuare lo stake\",\n            correctStake: \"Stake effetuato con successo\"\n\n          },\n          sideMenu: {\n            stakingForm: \"Modulo Staking\",\n            stakeList: \"Lista Stake\",\n            referrals: \"Pannello Referral\",\n            machineState: \"Stato Contratto\",\n            machineAvailableAmount: \" token ancora disponibili\",\n            loadingMachineState: \"Caricando stato macchina\"\n          },\n          staking_list: {\n            title: \"Lista Stake\",\n            noStakePresent: \"Nessuno stake presente\",\n            showArchived: \"Mostra archiviati\"\n          },\n          account_info: {\n            totalAmount: \"Ammontare totale degli stake\",\n            numberOfActiveStake: \"Numero stake attivi\",\n            noReferralPresent: \"Referral\"\n          },\n          referral_panel: {\n            myReferralLabel: \"Il tuo indirizzo di referral è\",\n            availableReward: \"Premio disponibile\",\n            totalAvailavelReward: \"Premio totale\",\n            withdrawAll: \"Preleva premio\",\n            noReferral: \"Nessun referral trovato\"\n          },\n          stake_detail: {\n            previewText: \"Token in stake\",\n            amountStaked: \"Token in stake\",\n            periodElasped: \"Periodi trascorsi\",\n            penalty: \"Penalità al prelievo\",\n            gain: \"Guadagno\",\n            withdrawed: \"Prelevato\",\n            creationTime: \"Data creazione\",\n            availableRewards: \"Premio disponibile al ritiro\",\n            withdrawReward: \"Preleva premio\",\n            withdraw: \"Preleva\"\n          },\n          withdrawBox: {\n            withdrawLabel: \"Se invece vuoi ritirare lo stake, clicca il bottone qui sotto\",\n            tokenSuccesWithdrawMsg: \"Token prelevati con successo\",\n            tokenFailedWithdrawMsg: \"Impossibile prelevare token\",\n          },\n          help: {\n            p1: \"Gli smart-contract gestiscono i token ERC20 in maniera diversa dagli Ether. Infatti, mentre normalmente quando si inviano ETH ad uno smart-contract esso è in grado capire autonomamente da chi provengono, per gli ERC20 non è così.\",\n            p2: \"Per questo motivo, prima di interagire con uno smart-contract che utilizza token ERC20, è necessario dare una sorta di \\\"Autorizzazione\\\". In pratica si autorizza lo smart-contract ad utilizzare una quantità specificata dei token dell'utente.\",\n            p3: \"In questo modo è possibile effettuare in modo sicuro transazione con i token ERC20.\",\n            linkText: \"Maggiori informazioni\",\n            link: \"https://tokenallowance.io/it/index.html\"\n          },\n          crowdsale: {\n            title: \"Pannello Vendita\",\n            liquidity: \"Liquidità Totale\", \n            currentRate: \"Cambio attuale\",\n            amountBITN: \"Ammontare di BITN\",\n            amountETH: \"Ammontare di  ETH\",\n            buyButton: \"Acquista\",\n            snackbarSuccess: \"Token acquistati con successo\",\n            snackbarFailure: \"Errore durante l'acquisto\",\n            liquidityLimitReached: \"Limite di liquidità raggiunto\"\n          },\n          approvementPanel: {\n            title: \"Autorizzazione\",\n            approvementStatus: \"Hai già l'approvazione per gestire\",\n            editExternalButton: \"Modifica la quantità\",\n            textLabel: \"Quantità da approvare\",\n            editInternalButton: \"Modifica la quantità da approvare\",\n            closeButton: \"Chiudi\"\n          },\n          HomePage: {\n            title: \"Benvenuto\",\n            subtitle: \"Inizia subito ad usare la BITN Staking Machine\",\n            tokenBalance: \"Token Disponibili\",\n            stakeToken: \"Metti i tuoi token in stake ora!!\",\n            goStaking: \"Vai alla pagina di staking\",\n            needToken: \"Hai bisogno dei BITN token?\",\n            goCrowdsale: \"Vai alla pagina di crowdsale\"\n          }\n        }\n      },\n\n  },\n  fallbackLng: \"en\",\n  debug: true,\n\n  // have a common namespace used around the full app\n  ns: [\"translations\"],\n  defaultNS: \"translations\",\n\n  keySeparator: \".\", // we use content as keys\n\n  interpolation: {\n    escapeValue: false, // not needed for react!!\n    formatSeparator: \",\"\n  },\n\n  react: {\n    wait: true\n  }\n});\n\nexport default i18n;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { SnackbarProvider } from 'notistack';\nimport { I18nextProvider } from \"react-i18next\";\nimport i18n from \"./i18n\";\n\nReactDOM.render(\n    <I18nextProvider i18n={i18n}>\n        <SnackbarProvider maxSnack={3}>\n            <App \n                i18n={i18n}\n            />\n        </SnackbarProvider>\n    </I18nextProvider>\n\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 928;"],"sourceRoot":""}